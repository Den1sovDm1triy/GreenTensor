import math
import cmath
import scipy
import matplotlib.pyplot as plt
import json
import numpy as np


#Задаем радиус сферы
k0 = 6 * math.pi
toch = 40
n = 4 #число слоев (последний слой - воздух)

eps = [0 * n for i in range(n)]
miy = [0 * n for i in range(n)]
a = [0 * n for i in range(n)]

#4 layers
a = [0.25, 0.5, 0.75, 1]
eps = [1.94, 1.75, 1.44, 1]
miy = [1, 1, 1, 1]

#9 layers
#a = [0.34, 0.49, 0.59, 0.69, 0.77, 0.84, 0.91, 0.97, 1]
#eps = [1.94, 1.82, 1.71, 1.59, 1.47, 1.35, 1.24, 1.12, 1]
#miy = [1, 1, 1, 1, 1, 1, 1, 1, 1]

#Task info
print ('Радиус сферы k0 =', k0)
print ('Точность расчетов toch =', toch)
print ('Параметры материалов:\n a =', a, '\n eps =', eps,'\n miy =', miy)

DN_NORM_HFSS_0 = [-24.3060802318121, -24.3060802318121, -25.0425433822797, -26.2312084695631, -27.7811178154272, -29.2193469008358, -29.4579191353907, -28.1104519693409, -26.2110936051664, -24.5207700061784, -23.2380191959692, -22.369065612476, -21.8841250886193, -21.7564622775312, -21.9695649054066, -22.516457984793, -23.3954797153688, -24.5987498278838, -26.0788414483877, -27.6611594687208, -28.9027107718583, -29.210441199475, -28.5309268756049, -27.421915674305, -26.3497101150964, -25.50413096825, -24.9362126848927, -24.6547238052068, -24.6637910648551, -24.9756412771308, -25.6145630131211, -26.6156787409927, -28.0105103322437, -29.7600583101949, -31.5169072911566, -32.282861192491, -31.3727610372871, -29.6804048071552, -28.1153625764458, -26.9583344844998, -26.2378864646814, -25.9293853498211, -26.0074758872782, -26.4560094938308, -27.2657089440808, -28.421750165833, -29.8666976692939, -31.4047464619577, -32.5618634199295, -32.7637727835057, -32.0477340249127, -31.0065349240223, -30.0886049224107, -29.4736645080771, -29.21518340906, -29.3271285260182, -29.8108691704511, -30.6469971809629, -31.7455128416362, -32.8304684193969, -33.3639421010346, -32.9480087193917, -31.8786459188384, -30.7207681642178, -29.8012678369448, -29.2369884937545, -29.0614705753174, -29.2900045701655, -29.9470541166965, -31.0825649343036, -32.7902774852395, -35.2304595868607, -38.5791638965259, -42.019125170118, -41.3658540134116, -38.1654880069837, -35.6454695814328, -33.9912139999968, -33.0139168799608, -32.5913019304264, -32.6721057245242, -33.2640526061941, -34.4396354292738, -36.3696891682955, -39.3987566816178, -43.8561862840833, -45.1529698274728, -40.4203802913011, -36.700004464055, -34.2465011318157, -32.6513463444268, -31.7017787220308, -31.3052086413072, -31.4453000397924, -32.1759037485851, -33.6529804311544, -36.2508742238866, -40.9723734131308, -47.955756089049, -40.5883366419317, -35.0956289917159, -31.7814184533423, -29.5956304741918, -28.1415342395483, -27.243503125807, -26.8208311281573, -26.8448863257537, -27.3234423271081, -28.2932712316351, -29.7981116782226, -31.7560796164831, -33.3868991801288, -32.8970420721498, -30.570572653737, -28.1414788399677, -26.1853335858171, -24.729133575457, -23.7147208827623, -23.0933401517903, -22.8366311554403, -22.9333200513079, -23.3816362201082, -24.1710516580249, -25.2285993647578, -26.2798751952152, -26.6947686451476, -25.9237384416518, -24.3069738875371, -22.5316096617454, -20.9547654519261, -19.6764208727436, -18.7041642485304, -18.0232214108098, -17.6179879190988, -17.4766521381722, -17.589013050636, -17.9382169859224, -18.481590091805, -19.112353162336, -19.6092303451691, -19.6576971314072, -19.070059400648, -17.9912203920682, -16.7363185317172, -15.5459238265015, -14.5402153431992, -13.7664944767109, -13.2402746988469, -12.9663220809211, -12.9476398167491, -13.1882750405837, -13.6915711872862, -14.4512358592257, -15.4261368652549, -16.4822807478988, -17.3112969845418, -17.4915284117264, -16.8871593294748, -15.8357835501329, -14.7553803397808, -13.8895602963344, -13.3489655306254, -13.1944354202262, -13.4868937291246, -14.3178158448198, -15.8288320688351, -18.131451608118, -20.3107013342991, -18.7436206389204, -14.8103016228542, -11.3636865841014, -8.65286908120505, -6.50846668486385, -4.79217794927878, -3.41352240832569, -2.31360290050461, -1.45329853909306, -0.806289807928414, -0.355011802294129, -0.0882929676592672, -5.26187621038871e-14, -0.0883342216214043, -0.355609788722825, -0.808463465458079, -1.4585457861558, -2.32386114885513, -3.43110359705712, -4.81963985019548, -6.54828135501652, -8.7063458823279, -11.4267593863803, -14.8542925081903, -18.6386869296116, -19.9589483156979, -17.8659269860148, -15.6837706918839, -14.2456754030013, -13.4594338234222, -13.1950498874006, -13.3661487221817, -13.9143635191638, -14.7813955742118, -15.8619699147666, -16.9238104161884, -17.560678059157, -17.4235827901822, -16.6190526766254, -15.5608162275015, -14.5666441621544, -13.7794781791883, -13.2455923753127, -12.9741947622891, -12.9639190879949, -13.2123849414797, -13.7182350700246, -14.4784441851821, -15.4791955605545, -16.6739159568576, -17.9391847751268, -19.022030342082, -19.5890263260543, -19.4953295778065, -18.9522065383229, -18.2913104522261, -17.7359817856643, -17.3896424246681, -17.2917952357092, -17.4573986739322, -17.8959085172704, -18.6194349559868, -19.6451281472528, -20.9911273093461, -22.6555276056543, -24.5430880233976, -26.2788248131563, -27.1027501675385, -26.6448903361077, -25.5384617907064, -24.4567071366747, -23.6676326382249, -23.2324524336332, -23.1542133252479, -23.4304986916341, -24.0703451620113, -25.1013724753365, -26.5738435891224, -28.5533619486098, -31.0388260509453, -33.5118939652942, -34.1614653405383, -32.4999492466128, -30.452275917078, -28.8723921332128, -27.8395550167048, -27.3005610892404, -27.2109028118188, -27.5553653229939, -28.3530171002103, -29.6687658030984, -31.6457175612604, -34.5953163080858, -39.2713736706863, -46.4734726400445, -42.5677981213686, -37.2761263832568, -34.2944113980831, -32.5349700267089, -31.5610236199837, -31.1893571776656, -31.3511898735264, -32.0513140633784, -33.3701601100302, -35.5119494046063, -38.9708319120192, -45.06949416352, -48.6489713102848, -41.2402458835666, -37.0354429515435, -34.5610374640388, -33.0773777362625, -32.2971092791226, -32.1049780798502, -32.476457220589, -33.45857307688, -35.178395216071, -37.8282717101969, -41.0678472244336, -41.1252017640976, -37.5163758077154, -34.3172182068889, -32.0430736852117, -30.4911615279201, -29.5041656246508, -28.9915499986998, -28.9050855358566, -29.2205718549927, -29.9201556183156, -30.9596735462624, -32.190790710448, -33.2263236683745, -33.4884785158431, -32.819418001041, -31.7140046844435, -30.670821561204, -29.915623423445, -29.5147162831907, -29.477148302447, -29.7929519098745, -30.4334657905932, -31.3169395559112, -32.2241681469788, -32.7170548159066, -32.362462375262, -31.2492350822307, -29.8602901639488, -28.5648019729821, -27.5235446189098, -26.7899411536608, -26.3809472795051, -26.3067324238888, -26.5810347184625, -27.2222242403677, -28.2426972970266, -29.6040659178872, -31.0733637958477, -31.9759681560614, -31.5484567642984, -30.0967868161548, -28.4617217252431, -27.0642850184969, -26.0046090930053, -25.2802377652487, -24.8704775462931, -24.7608040616519, -24.9490828308006, -25.4453444344004, -26.2639396899802, -27.392440480348, -28.6879428835144, -29.6438361026702, -29.4334552499433, -27.9891934185097, -26.1308138231858, -24.4351148123912, -23.0842607744747, -22.1053950039133, -21.4878233543835, -21.218757476894, -21.2924954277825, -21.7116047310241, -22.4836269578566, -23.6083190832521, -25.0362510771355, -26.5554512653855, -27.6263020857899, -27.6373864050212, -26.7400352307753, -25.6151737635381, -24.7009157641843]
DN_NORM_HFSS_90 = [-24.0006766643056, -24.0006766643056, -23.9645774431435, -23.915214602037, -23.8650821912062, -23.8299138313459, -23.8269540763234, -23.8729496132972, -23.9822563623834, -24.165544901577, -24.4295848114257, -24.7785564587251, -25.217228693808, -25.756023325917, -26.4174996945928, -27.2436479017144, -28.3045448009634, -29.7125989262649, -31.6557245595504, -34.4917873435679, -39.0714983868794, -47.1195656621434, -42.5432231427653, -36.559845029257, -33.2102574730243, -31.1304303403623, -29.8224631609152, -29.0604376234202, -28.720563220592, -28.7227866863258, -29.0055585526846, -29.5124576388188, -30.1840291840478, -30.9533422934615, -31.7463305651351, -32.4887595235154, -33.1194202603191, -33.6041301744347, -33.9423707627996, -34.1629638411685, -34.3128823168065, -34.4455261818432, -34.6110831937541, -34.8472506726497, -35.166051379113, -35.5319329238844, -35.8334797473301, -35.881818090202, -35.504251537224, -34.7017514104353, -33.6621046384681, -32.609026920412, -31.6972550559839, -31.0081481746844, -30.5782964898371, -30.4225186808693, -30.5461237497511, -30.9492180517325, -31.6240568369506, -32.5421335636922, -33.6223943330932, -34.67599444461, -35.3816794161309, -35.4547690471663, -34.9445769133197, -34.1774339914514, -33.4511156110879, -32.9263190656078, -32.6702628328081, -32.7065805358692, -33.0391982220607, -33.6560617271966, -34.5156609042507, -35.5130177025336, -36.4348150729649, -36.9825669756858, -36.9774685536879, -36.5529658209046, -36.0109646368187, -35.5909285953295, -35.418481101973, -35.544411530594, -35.9756122180012, -36.6747741891794, -37.5230061896429, -38.2555339629111, -38.4872275519397, -38.0123874754837, -37.0463490180754, -35.9602490308296, -34.9956680119023, -34.2508822779166, -33.7468679723573, -33.4682195612998, -33.3768648673733, -33.4109940011454, -33.4793599355148, -33.4646962982789, -33.2539113313567, -32.792505141976, -32.1171303338253, -31.3282547102891, -30.5346727380886, -29.8191700117417, -29.2324975084344, -28.7992595029646, -28.5234921425947, -28.38971260539, -28.3593827001941, -28.3659305410164, -28.3169812611248, -28.1169449131504, -27.7108380482054, -27.1175951947127, -26.4173809234091, -25.7071327232855, -25.0656176764349, -24.5427104382313, -24.1627086311614, -23.9301968623578, -23.8332294590132, -23.8425412753563, -23.9074328853829, -23.9518072732604, -23.8792487497528, -23.5987801738619, -23.0676641470769, -22.3177639161291, -21.4371189631426, -20.5267313088398, -19.669888892721, -18.9239511168885, -18.3242071475113, -17.8897617622615, -17.6270759107325, -17.5298833961368, -17.5749950498684, -17.7140923927512, -17.8647575137874, -17.9124246865459, -17.7423342395354, -17.2998346559795, -16.6272532267827, -15.833708522393, -15.0347690245519, -14.3174125864286, -13.7365938378265, -13.3246774461358, -13.1010621337671, -13.0782409177665, -13.2639274199557, -13.6587267530592, -14.2469481151332, -14.9755670797346, -15.7184385581528, -16.2509335144251, -16.3253357911094, -15.8775507779889, -15.1048519568442, -14.2849059681706, -13.6213007745396, -13.234638256275, -13.206192268206, -13.6184848411619, -14.5912163215256, -16.3215960439618, -19.0555524831415, -21.8204325950121, -19.5487312341667, -15.0329858864892, -11.4252180767119, -8.6680859794312, -6.50927861810383, -4.78859272664201, -3.40888731954556, -2.30907956955413, -1.44934471443885, -0.803160690440585, -0.352892964796258, -0.0872784471272117, -5.20141520659528e-14, -0.0889505405235554, -0.355999502703819, -0.807205654905012, -1.45352812498069, -2.31221691645324, -3.40927337574614, -4.78376859152124, -6.49562094340183, -8.64007596996146, -11.3743469391314, -14.9490855701562, -19.4646503700006, -21.9937431175421, -19.3142622613537, -16.5291348364714, -14.7592048755399, -13.7606672009927, -13.3317174313155, -13.3507821663572, -13.735339864474, -14.4048393180167, -15.2379022899487, -16.0239843446372, -16.4692236523238, -16.3638656781201, -15.7817130348608, -14.9897983196758, -14.2224967281676, -13.6068378594755, -13.1938862782379, -12.99730220391, -13.0150003300779, -13.2383381303447, -13.654394015382, -14.2438760849614, -14.9751614680104, -15.7946382967687, -16.6165764973426, -17.3245608622939, -17.8041630744067, -18.00443463391, -17.9738065864353, -17.8267184487724, -17.6811389456693, -17.6232758264823, -17.7041924120202, -17.9486382757943, -18.3633129566687, -18.9408707494063, -19.6595701186956, -20.4794510622596, -21.3373903356762, -22.147169081866, -22.8148220992468, -23.2733652049991, -23.5170382767479, -23.6025316332836, -23.6162023873662, -23.6392567947614, -23.7317484738904, -23.9319285047901, -24.2606598923024, -24.7246781265802, -25.3165131114465, -26.0107717645827, -26.7580763166305, -27.4816893260344, -28.0878016754684, -28.4991770757727, -28.6982196782413, -28.7399753184208, -28.7205661941087, -28.7343694415367, -28.8509973593765, -29.111923957974, -29.5339750366094, -30.1107849018621, -30.8088530207003, -31.5593582245511, -32.254824996287, -32.7710929828549, -33.0268413944449, -33.0404636449413, -32.9193879398174, -32.79603522793, -32.7789459149939, -32.941840878742, -33.3316335595605, -33.9768788296808, -34.8870503064489, -36.0326994613125, -37.2891214405888, -38.3477632469194, -38.7632449056971, -38.3733661373276, -37.5256483909188, -36.6580158752866, -36.0172336007954, -35.7011815785106, -35.7401751470019, -36.1305263005134, -36.8235598398514, -37.6649288475385, -38.3007917156861, -38.2587584340099, -37.4220179729429, -36.1846889214575, -34.9702026772943, -33.9916158586426, -33.32031396317, -32.9700392575606, -32.9354787594923, -33.2029886722903, -33.744215236181, -34.4899450434009, -35.2762988630542, -35.7942385265033, -35.6996369753313, -34.9423991086295, -33.8273058420822, -32.6912461749514, -31.7280355949494, -31.0196524040804, -30.5952561465515, -30.4638322909021, -30.6270254514063, -31.0814065947116, -31.8133421343464, -32.7848195080094, -33.9065678599325, -35.0050960537439, -35.8333855689352, -36.2040455296046, -36.1523308122808, -35.8840407561044, -35.5915855255063, -35.3710133259048, -35.2353272476283, -35.1451210444554, -35.0315473978899, -34.816996978542, -34.4397323323608, -33.876628747294, -33.1498950290756, -32.3140170390897, -31.4358362446379, -30.5811050319866, -29.8098496825587, -29.1765884151013, -28.7322066079952, -28.5267500293671, -28.6138584892026, -29.0584739969366, -29.9513688052401, -31.4399454025193, -33.80497576201, -37.6920964472908, -44.5563034515443, -43.3754156064964, -36.7968248653864, -32.987368204038, -30.5265163842105, -28.822167840302, -27.5975080902747, -26.6949825472929, -26.0124774017501, -25.4802440244781, -25.0520830677452, -24.7008392375365, -24.4139531673978, -24.1880054380769, -24.0230611801097, -23.9180762764998, -23.8681190901324, -23.8634979074454, -23.8904933699107, -23.9332335500705, -23.9761470688381]

teta_start = 0.01
teta_stop = 360
step = math.pi/180
teta_diap = abs(teta_stop)-abs(teta_start)
steps = int(((teta_diap)*(math.pi/180)) / step)
teta = [0 * n for i in range(steps)]
cos_teta = [0 * n for i in range(steps)]

#Создаем массив для переменных среды
alfa = [0 * n for i in range(n)]
beta = [0 * n for i in range(n)]
etta = [0 * n for i in range(n)]
k= [[0] * n for i in range(n)]

#Расчет переменных, входящих в коэффициенты k
for i in range(n):
  alfa[i] = math.atan((eps[i]).imag / (eps[i]).real)
  beta[i] = math.atan((miy[i]).imag / (miy[i]).real)
  etta[i] = math.sqrt(math.fabs(eps[i]) * math.fabs(miy[i]))

#Расчет коэффициентов среды k

j = 0; #Индекс для рассчета коэффициентов k

for i in range (n):
  k[i][j] = k0 * a[i] * etta[j]
  if j < n - 1:
    j = j + 1
    k[i][j] = k0 * a[i] * etta[j]

####################################
# Определяем переменные для функции Бесселя, Неймана, их производных, C, S, их производных
####################################

J = [0 * n for i in range(toch)]
Jpr = [0 * n for i in range(toch)]
N = [0 * n for i in range(toch)]
Npr = [0 * n for i in range(toch)]
C = [[0] * (len(etta)-1) for i in range(toch)]
Cpr = [[0] * (len(etta)-1) for i in range(toch)]
S = [[0] * (len(etta)-1) for i in range(toch)]
Spr = [[0] * (len(etta)-1) for i in range(toch)]

####################################
# Определяем модифицированную функцию Бесселя первого рода как функцию Jfunc(i, j1, j2)
# где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
####################################

def Jfunc(i, j1, j2):
  nu = i + 1
  J = (scipy.special.jv(nu + 0.5, k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))
  return J

####################################
# Определяем производную функции Бесселя первого рода как функцию Jprfunc(i, j1, j2, tie)
# где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
####################################

def Jprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Jpr = ((nu / (2 * nu + 1)) *  (scipy.special.jv(nu - 0.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.jv(nu + 1.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) + \
    (J[i] / k[j1][j2]))
  else:
    Jpr = ((nu / (2 * nu + 1)) * ((scipy.special.jv(nu - 0.5,k[j1][j2]) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
     (((nu + 1) / (2 * nu + 1)) * ((scipy.special.jv(nu + 1.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
     ((scipy.special.jv(nu + 0.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]
  return Jpr

####################################
# Определеям модифицированную фунцию Бесселя второго рода (функцию Неймана) как функцию Nfunc(i, j1, j2)
# где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
####################################

def Nfunc(i, j1, j2):
  N = scipy.special.yv((i+1) + 0.5, k[j1][j2]) * math.sqrt(k[j1][j2]* math.pi/2)
  return N

####################################
# Производная функции Неймана как функцию Nprfunc(i, j1, j2, tie)
# где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
####################################

def Nprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Npr = ((nu / (2 * nu + 1)) *  (scipy.special.yv(nu - 0.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.yv(nu + 1.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) + \
    (Nfunc(i, j1, j2) / k[j1][j2]))
  else:
    Npr = (((nu/(2 * nu + 1)) * (((scipy.special.yv(nu - 0.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
    (((nu + 1) / (2 * nu + 1)) * ((scipy.special.yv(nu + 1.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
    (Nfunc(i, j1, j2)) / k[j1][j2])
  return Npr

####################################
# Вычисляем массивы значений функции Бесселя первого рода, функции Неймана и их производных для i = 1...toch (значение точности расчетов)
# связь между слоями не учитываем (tie == False), для k[0][0]  (j1, j2 == 0)
####################################

for i in range(toch):
  J[i] = Jfunc(i, 0, 0)
  Jpr[i] = Jprfunc(i, 0, 0, False)
  N[i] = Nfunc(i, 0, 0)
  Npr[i] = Nprfunc(i, 0, 0, False)


####################################
# Вычисляем массивы значений функций C, S и их производных (Cpr и Spr)
# в Npr и Jpr учитываем связь между слоями (tie == True)
# C = J * Npr - N * Jpr
# Cpr(n) = Jpr * Npr - Npr * Jpr
# S(n) = N * J - J * N
# Spr(n) = Npr * J - Jpr * N
####################################

for i in range(toch-1):
  for j in range(len(etta)-1):
    C[i][j] = (Jfunc(i, (j+1), (j+1)) * Nprfunc(i, j, (j+1), True)) - (Nfunc(i, (j+1), (j+1)) * Jprfunc(i, j, (j+1), True))
    Cpr[i][j] = Jprfunc(i, (j+1), (j+1), True) * Nprfunc(i, j, (j+1), True) - Nprfunc(i, (j+1), (j+1), True) * Jprfunc(i, j, (j+1), True)
    S[i][j] = Nfunc(i,(j+1),(j+1)) * Jfunc(i,j,(j+1)) - Jfunc(i,(j+1),(j+1)) * Nfunc(i,j,(j+1))
    Spr[i][j] = Nprfunc(i,(j+1),(j+1), True) * Jfunc(i, j, (j+1)) - Jprfunc(i,(j+1),(j+1), True) * Nfunc(i, j, (j+1))

####################################
# Добавляем в конец массива alfa элемент со значением 0
# Добавляем в конец массива eps элемент со значением длинны массива eps
####################################

if eps[len(eps)-1] != (len(eps)-1):
    alfa.append(0)
    eps.append(len(eps))

####################################
# Определяем импедансы (Z) и адмитансы (Y)
####################################

Z = [[0] * (len(a)) for i in range(toch)]
Y = [[0] * (len(a)) for i in range(toch)]

for i in range(toch - 1):
  for h in range(len(a)):

####################################
#Задаем импедансы (Z) и адмитансы (Y) для первого слоя
####################################

    if h == 0:
      Z[i][h] = (cmath.sqrt((cmath.exp(alfa[1] * 1j) * abs(eps[1])) / ((cmath.exp(alfa[0] * 1j) * abs(eps[0]))))) * ((Jpr[i])/(J[i]))
      Y[i][h] = (cmath.sqrt((cmath.exp(alfa[0] * 1j) * abs(eps[0])) / ((cmath.exp(alfa[1] * 1j) * abs(eps[1]))))) * ((Jpr[i])/(J[i]))

####################################
#Задаем импедансы (Z) и адмитансы (Y) для последнего слоя
####################################

    else:
      if h == (len(a) - 1):
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                  (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1]) / 2
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                  (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1]) * 2

####################################
#Задаем импедансы (Z) и адмитансы (Y) для промежуточных слоёв
####################################

      else:
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1])
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1])

####################################
# Определяем массивы для mJ, mJpr, mH, mHpr
####################################

mJ = [0 * n for i in range(toch)]
mJpr = [0 * n for i in range(toch)]
mH = [0 * n for i in range(toch)]
mHpr = [0 * n for i in range(toch)]

####################################
#Функция Ханкеоя второго рода как функцию Hfunc(i)
#где: i -- порядок
####################################

def Hfunc(i):

  nu = i + 1
  H = (scipy.special.hankel1(nu + 0.5,k0)) * (math.sqrt(k0 * math.pi/2))
  return H

####################################
#Производная функции Ханкеоя второго рода как функцию Hprfunc(i)
#где: i -- порядок
####################################

def Hprfunc(i):
  nu = i + 1
  Hpr = ((nu / (2 * nu + 1)) * (((scipy.special.hankel1(nu - 0.5,k0) * (cmath.sqrt(k0 * math.pi/2))) / k0)) * k0 - \
  (((nu + 1) / (2 * nu + 1)) * ((scipy.special.hankel1(nu + 1.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0) * k0 + \
  ((scipy.special.hankel1(nu + 0.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0)
  return Hpr

####################################
#Заполняем массивы mJ, mJpr, mH, mHpr
####################################

k1 = k0
k00 = k[0][0]
k[0][0] = k0
for i in range(toch):
  mJ[i] = Jfunc(i, 0, 0)
  mJpr[i] = Jprfunc(i, 0, 0, True)
  mH[i] = Hfunc(i)
  mHpr[i] = Hprfunc(i)
k0 = k1
k[0][0] = k00

####################################
# Определяем массивы для Mn и Nn
####################################

Mn = [0 * n for i in range(toch)]
Nn = [0 * n for i in range(toch)]

####################################
# Задаём Mn и Nn
####################################

for i in range(toch):
  nu = i + 1
  Mn[i] = (Z[i][h] * mJ[i] - mJpr[i]) / (Z[i][h] * mH[i] - mHpr[i])
  Mn[i] = Mn[i].real - Mn[i].imag * 1j
  Nn[i] = (Y[i][h] * mJ[i] - mJpr[i]) / (Y[i][h] * mH[i] - mHpr[i])
  Nn[i] = Nn[i].real - Nn[i].imag * 1j

for i in range(steps):
  if i == 0:
    teta[i] = (teta_start)*(math.pi/180)
  else:
    teta[i] = teta[i-1] + step

for i in range(steps):
  cos_teta[i] = math.cos(teta[i])

M = [0 * n for i in range(steps)]
Lm0=[0 * n for i in range(steps)]
Lm1=[0 * n for i in range(steps)]
Lm2=[0 * n for i in range(steps)]
pii = [[0] * ((2*steps+1)) for i in range(toch+1)]
tay = [[0] * ((2*steps+1)) for i in range(toch+1)]
m=0

for i in range(toch):
  m = m+1
  M = scipy.special.lpmv(0, m, cos_teta)
  Lm0 = M
  M = scipy.special.lpmv(1, m, cos_teta)
  Lm1 = M

  if m<2:
    Lm2 = 0
  else:
    M = scipy.special.lpmv(2, m, cos_teta)
    Lm2 = M

  for z in range(len(teta)):
    if (teta[z] > 0) & (teta[z] < math.pi):
      pii[i][z] = ((1)*Lm1[z])/(math.sin(teta[z]))
    else:
      if (teta[z] > math.pi) & (teta[z] < 2*math.pi):
        pii[i][z] = ((-1)*Lm1[z])/(math.sin(teta[z]))

  for z in range(len(teta)):
    if m<2:
      tay[i][z] = (1/2)*(-m*(m+1)*Lm0[z])
    else:
      tay[i][z] = (1/2)*(Lm2[z]-m*(m+1)*Lm0[z])

E_teta= [[0] * (len(teta)) for i in range(toch)]
E_phi= [[0] * (len(teta)) for i in range(toch)]
P_teta= [[0] * (len(teta)) for i in range(toch)]
P_phi= [[0] * (len(teta)) for i in range(toch)]
y=0

for z in range(len(teta)):
  for p in range(toch):
    y=p+1
    E_teta[p][z]=((((2*y+1)/(y*(y+1)))*((-1)**y))*(tay[p][z]*Mn[p]-pii[p][z]*Nn[p]))
    E_phi[p][z]=((((2*y+1)/(y*(y+1)))*((-1)**y))*(pii[p][z]*Mn[p]-tay[p][z]*Nn[p]))

  for p in range(toch):
    y=p+1
    P_teta[0][z]=(P_teta[0][z]+E_teta[p][z])
    P_phi[0][z]=(P_phi[0][z]+E_phi[p][z])
  for p in range(toch):
    P_teta[0][z]=abs(P_teta[0][z])
    P_phi[0][z]=abs(P_phi[0][z])

#Normalize E diagram
tetay = [0 * n for i in range(steps)]
DN_NORM_teta = [0 * n for i in range(len(teta))]
DN_NORM_phi= [0 * n for i in range(len(teta))]

P_teta_max = 0
P_phi_max = 0

for i in range(len(teta)):
  if P_teta[0][i] > P_teta_max:
    P_teta_max = P_teta[0][i]

for i in range(len(teta)):
  if P_phi[0][i] > P_phi_max:
    P_phi_max = P_phi[0][i]

for i in range(len(teta)):
  tetay[i] = teta[i]*(steps/math.pi)

tetay.reverse()

    #Conrol Point
for i in range(len(teta)):
  DN_NORM_teta[i] = 20*math.log10(P_teta[0][i]/P_teta_max)
  DN_NORM_phi[i] = 20*math.log10(P_phi[0][i]/P_phi_max)

####################################
##Visualisation=========================Polar Plot
####################################

# Разворачиваем направление графика в соответствии с референсной статьей
for i in range(steps):
  teta[i] = teta[i] - math.pi

# Создаем два графика в ряд
fig, axs = plt.subplots(1, 2, figsize=(10, 5), subplot_kw={'projection': 'polar'})
D = (np.array(DN_NORM_teta)-np.array(DN_NORM_HFSS_0))
D1 = np.array(DN_NORM_teta) * (-1)
# График слева
axs[0].plot(teta, D1, color='orange', linestyle='-', linewidth=1, label='GreenTensor | Bistatic RCS')
axs[0].plot(teta, D, color='orange', linestyle=':', linewidth=1, label='HFSS | Bistatic RCS')
axs[0].set_title("dB | VV-pol", pad=30)
axs[0].legend(loc='best')

# График справа
axs[1].plot(teta, DN_NORM_phi, color='blue', linestyle='-', linewidth=1, label='GreenTensor | Bistatic RCS')
axs[1].plot(teta, DN_NORM_HFSS_90, color='blue', linestyle=':', linewidth=1, label='HFSS | Bistatic RCS')
axs[1].set_title("dB HH-pol", pad=30)
axs[1].legend(loc='best')





# Показать оба графика
plt.show()
S1 = (np.sum(np.array(DN_NORM_phi)**2) * math.pi) / 360
S2 = (np.sum(np.array(DN_NORM_teta)**2) * math.pi) / 360
S3 = (np.sum(np.array(DN_NORM_HFSS_0)**2) * math.pi) / 360
S4 = (np.sum(np.array(DN_NORM_HFSS_90)**2) * math.pi) / 360
S22 = (np.sum((np.array(DN_NORM_teta)-np.array(DN_NORM_HFSS_0))**2) * math.pi) / 360
S33 = (np.sum((np.array(DN_NORM_phi)-np.array(DN_NORM_HFSS_90))**2) * math.pi) / 360
Pc1 = (S33)/(S1/100)
Pc2 = (S22)/(S2/100)
print(Pc1, Pc2)