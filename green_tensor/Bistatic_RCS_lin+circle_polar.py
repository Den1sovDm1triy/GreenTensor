import math
import cmath
import scipy
import matplotlib.pyplot as plt
import json
import matplotlib.ticker as ticker
import numpy as np

#Задаем радиус сферы
k0 = 5
toch = 15
n = 3 #число слоев (последний слой - воздух)
phi = 2*math.pi/2

eps = [0 * n for i in range(n)]
miy = [0 * n for i in range(n)]
a = [0 * n for i in range(n)]

#4 layers
a = [0.1, 0.2, 1]
eps = [-1.7e7j, -1.7e7j, 1]
miy = [1,1,1]
DN_NORM_Ansys = [-24.6897272958261, -24.803157550588, -25.0902772239008, -25.5009817678081, -25.9302184433818, -26.2177453003537, -26.2033799838903, -25.8354185172427, -25.2160761819961, -24.5199115744304, -23.8967416182625, -23.4416984398791, -23.2080645697278, -23.2266616255522, -23.5197583633288, -24.1094909443432, -25.0224518288116, -26.2894450511961, -27.9303788808284, -29.8831446919743, -31.7655437312592, -32.5965068691792, -31.7993059285864, -30.2435199027417, -28.7645564898575, -27.6220719619843, -26.8426033654848, -26.4016811593444, -26.2735133866026, -26.4408619116728, -26.8937478689328, -27.621776301713, -28.5951019325906, -29.7211488102244, -30.771005507329, -31.3621194405475, -31.2203065990781, -30.5114229948686, -29.6387972474946, -28.8942682527599, -28.4099631528631, -28.2312478004508, -28.3692440318932, -28.8234751089764, -29.5867102027725, -30.6343997765723, -31.8875573008285, -33.1305808057234, -33.9388429391129, -33.9039647725252, -33.121865155424, -32.0628196694754, -31.0898376360492, -30.365720296679, -29.9474400343064, -29.8532814046321, -30.0890178096408, -30.6508775200733, -31.5090723131772, -32.5607136178102, -33.5464597810196, -34.0399950518223, -33.7705403056511, -32.9649934292606, -32.0580519513756, -31.3339985045148, -30.9138475835779, -30.8411933754948, -31.1358056983363, -31.8168242739241, -32.9094746748447, -34.4329744175083, -36.3299743497724, -38.2145039685307, -39.045944090047, -38.2079068556688, -36.6547997015004, -35.2649765182217, -34.3015217493053, -33.7985486775205, -33.7504754628701, -34.1632653425671, -35.0662893017196, -36.5040336091462, -38.4558195670879, -40.4340643272916, -40.8048706868539, -38.9765474049377, -36.6716089869217, -34.7869956916347, -33.4399256760848, -32.5885843623588, -32.1886184076319, -32.2156052697537, -32.6596163735599, -33.5012444729609, -34.636160174589, -35.6808937422253, -35.8421672793072, -34.7091220201929, -32.9299441367279, -31.1982569394214, -29.7810076344876, -28.7306421303118, -28.0384365412301, -27.6851500743978, -27.6523311095362, -27.9185571302033, -28.4428868054268, -29.1270938453952, -29.7538900022214, -29.9724234996689, -29.5110843522516, -28.4743130658497, -27.2123066246719, -26.0067413809127, -24.9960544021558, -24.2316794295636, -23.7276928870945, -23.4842167691151, -23.4943695650181, -23.7403900873849, -24.1775322903922, -24.7004085454645, -25.1002513928217, -25.0861486850342, -24.4763972632533, -23.3855789641768, -22.0979343677534, -20.8445760761594, -19.747309173344, -18.8561726269225, -18.1872536155383, -17.7426542648555, -17.5180811022072, -17.5029716355695, -17.6744234923767, -17.9837123772672, -18.3354587790263, -18.5726404163228, -18.509291961773, -18.0401876122078, -17.2301243132294, -16.2568232446149, -15.2911763331037, -14.4442701916829, -13.775249304073, -13.3130172339539, -13.0721658517863, -13.0615196100215, -13.287227087469, -13.750888936446, -14.4401015188088, -15.3041224441579, -16.2056313550107, -16.8714995227122, -16.975219733369, -16.434155453005, -15.5174786930212, -14.5673209889161, -13.8042856440496, -13.3426261187407, -13.2523749466766, -13.6039881941325, -14.5003676848266, -16.1023993789654, -18.5549497163129, -20.8529040412626, -18.9719652598761, -14.8497769882347, -11.3640109458318, -8.64739088174103, -6.50355541749351, -4.78848738388769, -3.41060709571395, -2.3110254809233, -1.45087385970667, -0.804083317311309, -0.353259388781522, -0.0872937066914874, 0, -0.0894094057857727, -0.357552163128809, -0.810674795670075, -1.45994405208812, -2.322810908367, -3.42539990318205, -4.80663576393852, -6.52546058484224, -8.67346848938341, -11.3944326823162, -14.8828447114265, -18.9945800215914, -20.8411582200591, -18.5488629112311, -16.1120051799339, -14.5211526110081, -13.6332935309135, -13.2888949982761, -13.3854059460527, -13.8516487746251, -14.6150175215475, -15.5554030014065, -16.4432938377428, -16.9342189031017, -16.7782390120298, -16.0821553337892, -15.1740258733809, -14.3162301966988, -13.6378541940756, -13.1857372058666, -12.9708123897739, -12.9911714133477, -13.2410661724016, -13.7127957775492, -14.3939144934384, -15.2591342113468, -16.25450835835, -17.2738847382307, -18.1445600256333, -18.6723310730977, -18.7688322219405, -18.5312115340609, -18.155979797996, -17.8137046412936, -17.6077582637836, -17.5897256528608, -17.7824089713164, -18.1945780880376, -18.827411113353, -19.6742418641314, -20.7128480189826, -21.8867018520044, -23.0733855595486, -24.0620618844237, -24.6161792378347, -24.6537409576773, -24.3327489955749, -23.9025740947972, -23.5515906612838, -23.3828547573924, -23.4454051756033, -23.7625320682761, -24.3465201145044, -25.2024181016084, -26.3205273418947, -27.6495076005361, -29.0354575426944, -30.1491514214775, -30.5877849412168, -30.2786848731945, -29.5776008421402, -28.867790646749, -28.3563680388847, -28.1249367022488, -28.2020268431197, -28.6003177918058, -29.3308679130719, -30.4042254543975, -31.8151898244585, -33.4867290063428, -35.1239992287094, -36.0781259274691, -35.8561119954294, -34.8713837021858, -33.8053257449957, -32.9972453954546, -32.5483406967826, -32.4805619963944, -32.8028001079834, -33.5326648898065, -34.700706930198, -36.3326723622655, -38.347849321518, -40.1836327813082, -40.4984169351145, -39.060106710261, -37.217912524006, -35.7126303708463, -34.686271460502, -34.1297764868815, -34.0224319727732, -34.3594369807323, -35.1484855842486, -36.3738595137295, -37.8550538221759, -38.8896938790107, -38.4051669509527, -36.6282265497061, -34.6541619512959, -33.0051105304798, -31.7845786881858, -30.980994716633, -30.5656312097079, -30.5126062487081, -30.7956375150901, -31.371257987787, -32.1426759444989, -32.9033548425908, -33.3252930704553, -33.1497353295451, -32.45984198405, -31.5797940238315, -30.7850358274649, -30.2184958846309, -29.9374324867181, -29.9602921272531, -30.288351212992, -30.906997652456, -31.7650484330432, -32.7198566040631, -33.4594303825715, -33.562278539057, -32.8833233061734, -31.7415450521521, -30.5419326546616, -29.5191545571414, -28.7702934590346, -28.330531713239, -28.2130230375181, -28.4221916856487, -28.9506199202299, -29.7568099807544, -30.7089780323367, -31.4985076133771, -31.6787991708666, -31.062150867186, -29.9589395518201, -28.7869075374836, -27.7828076578327, -27.0357791043963, -26.5711849134588, -26.3960253909632, -26.5178045529439, -26.9518800115627, -27.7228937690157, -28.8562654829967, -30.3335835340662, -31.9230606673386, -32.8244863069009, -32.0931810097125, -30.2172608144703, -28.2208174217509, -26.5232742031099, -25.1957314016873, -24.2183008863534, -23.5582424325687, -23.1866865446109, -23.0793341139062, -23.212471712398, -23.5560957442661, -24.0634662394989, -24.6574863474087, -25.221468100933, -25.6158156636891, -25.7395199371728, -25.5984322977113, -25.3005893696724, -24.984212613276]
DN_NORM_Ansys_1 = [-0.00131737291775344, -0.00447041081226463, -0.00945914477427113, -0.016284103271382, -0.0249463199086918, -0.0354473419582193, -0.0477892396684532, -0.0619746163816658, -0.0780066195022893, -0.0958889523740134, -0.115625887136405, -0.137222278643597, -0.160683579537489, -0.186015856576308, -0.213225808325868, -0.242320784325499, -0.273308805843509, -0.306198588338337, -0.340999565740757, -0.377721916670812, -0.416376592699583, -0.456975348761637, -0.499530775818577, -0.544056335868303, -0.59056639938843, -0.639076285296096, -0.689602303500695, -0.742161800120993, -0.796773205434106, -0.85345608462127, -0.912231191374691, -0.973120524430982, -1.03614738710094, -1.10133644987193, -1.16871381616935, -1.23830709137713, -1.31014545523459, -1.38425973774875, -1.46068249878698, -1.53944811154607, -1.62059285012964, -1.70415498150741, -1.79017486217714, -1.87869503990368, -1.96976036096965, -2.06341808343965, -2.15971799701508, -2.2587125501398, -2.36045698510946, -2.46500948203975, -2.57243131266246, -2.68278700504382, -2.79614452045923, -2.91257544381395, -3.03215518917111, -3.1549632221423, -3.2810833011108, -3.41060373950008, -3.54361769157302, -3.68022346455538, -3.82052486022658, -3.96463154951865, -4.1126594841184, -4.26473134958837, -4.42097706512112, -4.58153433573218, -4.74654926349835, -4.91617702537792, -5.0905826262365, -5.26994173697264, -5.4544416291321, -5.64428221916154, -5.83967723753777, -6.04085554048666, -6.24806258496142, -6.46156209108792, -6.68163792053993, -6.90859620444286, -7.14276776063347, -7.38451084768991, -7.63421431243172, -7.89230119901006, -8.15923290182562, -8.43551396205916, -8.72169762953068, -9.01839233917467, -9.32626928629746, -9.64607132918279, -9.97862350451959, -10.3248455145698, -10.6857666404719, -11.0625436611367, -11.4564825222702, -11.8690647196927, -12.3019796556729, -12.7571646251195, -13.2368546305827, -13.7436449680162, -14.2805705484214, -14.851207331749, -15.4598031875604, -16.1114481171362, -16.8122971754786, -17.5698634296404, -18.393401672507, -19.2944019622952, -20.2871911543335, -21.3895559923721, -22.6230132313005, -24.0114122343293, -25.5735182011779, -27.2957995138804, -29.0485858719829, -30.4110112423744, -30.6881992603966, -29.7017518986232, -28.0765451796092, -26.3712120136739, -24.7993775743137, -23.4027817768551, -22.1695269544111, -21.0762043892325, -20.1001272935563, -19.222146778961, -18.4267521845712, -17.7015064671834, -17.0364182419595, -16.4234059445525, -15.8558754720467, -15.328396338435, -14.8364552184843, -14.3762680994039, -13.9446362698005, -13.5388350498482, -13.1565270708103, -12.7956940835097, -12.4545828628581, -12.131661927311, -11.8255866275892, -11.5351707673628, -11.2593633642306, -10.9972294881075, -10.7479343585801, -10.5107300659797, -10.2849444193066, -10.0699715294978, -9.86526381735339, -9.67032519791047, -9.48470524167881, -9.30799415126783, -9.13981842200597, -8.97983707903198, -8.8277384024146, -8.68323706718655, -8.54607163756933, -8.41600236473261, -8.29280924565654, -8.17629030741761, -8.06626008679028, -7.96254827967466, -7.8649985387072, -7.77346740062786, -7.68782332768088, -7.60794584960508, -7.53372479470145, -7.46505960010732, -7.40185869280854, -7.34403893412201, -7.2915251214149, -7.2442495417196, -7.20215157267792, -7.16517732692355, -7.13327933660266, -7.10641627525338, -7.08455271472647, -7.06765891524138, -7.0557106470427, -7.04868904245915, -7.04658047747652, -7.04937648222458, -7.05707368004881, -7.06967375509864, -7.08718344861637, -7.10961458436145, -7.1369841238568, -7.16931425240147, -7.20663249706218, -7.24897187813935, -7.2963710959066, -7.34887475475155, -7.4065336272072, -7.46940496076342, -7.53755283079635, -7.61104854345945, -7.68997109295444, -7.77440767825826, -7.86445428513829, -7.96021634016374, -8.06180944443786, -8.16936019596363, -8.28300711094817, -8.40290165599091, -8.52920940503834, -8.66211133728743, -8.80180529495757, -8.94850762312377, -9.10245501773002, -9.26390661263154, -9.43314634223265, -9.61048562323053, -9.79626640744001, -9.99086466804042, -10.1946943943374, -10.408212185893, -10.6319225564521, -10.866384082532, -11.1122165622098, -11.370109388343, -11.6408313895629, -11.9252424550418, -12.2243073394518, -12.539112148305, -12.8708841385103, -13.2210156445172, -13.5910931701999, -13.9829329882123, -14.3986249844522, -14.8405870030837, -15.3116326176193, -15.8150561003444, -16.354739379785, -16.9352868623932, -17.562194788384, -18.242061255301, -18.9828384064316, -19.7941123033766, -20.6873497075046, -21.6759239665427, -22.7743884185031, -23.995537963035, -25.3413490822561, -26.778085996155, -28.1777033505045, -29.2305574153456, -29.4952751687455, -28.8098302043765, -27.5069733819626, -26.0051096182463, -24.5336024852724, -23.1733911818121, -21.9394412894434, -20.8237293541707, -19.81215974074, -18.8904689917282, -18.0460108371164, -17.2680827902745, -16.5477759836409, -15.8777026200356, -15.2517233005112, -14.6647109611682, -14.1123574236758, -13.5910184308229, -13.0975905445509, -12.6294134717398, -12.1841923647487, -11.7599357260762, -11.3549055011078, -10.9675767180141, -10.5966046401611, -10.2407978624387, -9.89909613847492, -9.57055199646929, -9.25431540784605, -8.94962093087176, -8.65577687275064, -8.3721561074416, -8.09818825922971, -7.83335301892625, -7.57717440421582, -7.32921581092974, -7.0890757300307, -6.85638402745764, -6.63079870193243, -6.41200305031544, -6.19970318184204, -5.99362583214025, -5.79351643576052, -5.59913742238487, -5.41026670719573, -5.22669635028827, -5.04823136367396, -4.8746886474836, -4.70589603954362, -4.54169146465863, -4.38192217175603, -4.22644404859385, -4.07512100504693, -3.92782441710845, -3.78443262470502, -3.64483047724999, -3.50890892157332, -3.37656462748509, -3.24769964676775, -3.12222110186339, -3.00004090093488, -2.88107547634447, -2.76524554391595, -2.6524758806335, -2.54269511868698, -2.43583555400333, -2.33183296761137, -2.2306264583742, -2.13215828579368, -2.03637372174544, -1.94322091014386, -1.85265073366442, -1.76461668676762, -1.67907475437551, -1.59598329564859, -1.51530293239917, -1.43699644175658, -1.3610286527718, -1.28736634671263, -1.21597816085806, -1.14683449564979, -1.07990742510263, -1.01517061041223, -0.952599216729308, -0.892169833094914, -0.833860395550286, -0.77765011344976, -0.723519399014167, -0.671449800167652, -0.621423936701478, -0.573425439805861, -0.527438895004781, -0.483449788520056, -0.441444457079669, -0.401410041172313, -0.363334441735666, -0.327206280250111, -0.29301486219379, -0.260750143798247, -0.23040270202809, -0.201963707692629, -0.175424901582897, -0.150778573514399, -0.128017544144294, -0.107135149421948, -0.0881252275239547, -0.0709821081191852, -0.0557006038059781, -0.0422760035626214, -0.0307040680535172, -0.0209810266371077, -0.0131035759274505, -0.00706887976940652, -0.00287457049734822, -0.000518751359052923]
DN_NORM_Ansys_2 = [-13.7068553904319, -13.7374574978429, -13.7740993097551, -13.8163937357759, -13.8639551226362, -13.9164081417766, -13.9733970652353, -14.0345951515385, -14.0997138252857, -14.168511303948, -14.2408003052167, -14.3164544596603, -14.3954130572582, -14.4776837723135, -14.5633430377736, -14.6525337742846, -14.745460217284, -14.8423796220639, -14.9435906564941, -15.0494183087685, -15.1601951392106, -15.2762386895883, -15.3978248335386, -15.5251568169865, -15.6583297162152, -15.7972900640665, -15.941790508175, -16.0913396354821, -16.2451476129476, -16.4020691635992, -16.5605467350652, -16.7185586146211, -16.8735792025045, -17.0225614852945, -17.1619544389599, -17.2877696696287, -17.3957106342474, -17.4813726284932, -17.5405112167777, -17.5693612955605, -17.5649714975617, -17.5255048069415, -17.4504526907778, -17.3407210421712, -17.1985705148507, -17.0274240442686, -16.8315801901295, -16.6158842740655, -16.385407838816, -16.1451743008774, -15.899951311128, -15.6541142451257, -15.4115738456183, -15.175755075494, -14.9496127106541, -14.7356704834911, -14.536073184701, -14.3526439990587, -14.1869419094892, -14.0403160203987, -13.9139551015501, -13.8089316131954, -13.7262400475464, -13.6668297103997, -13.6316321468456, -13.6215833362401, -13.6376405661318, -13.6807935371818, -13.7520687164356, -13.8525251749199, -13.9832390030631, -14.1452717197844, -14.3396156258622, -14.5671054531262, -14.8282804969961, -15.1231742648132, -15.4509994117828, -15.8096853876075, -16.1952188373905, -16.6007433555356, -17.0154199026271, -17.4231755058451, -17.8017294390468, -18.1226851792087, -18.3538085596618, -18.4643135446202, -18.4324270059785, -18.2521823622202, -17.9355748774533, -17.5086857778531, -17.0042293063217, -16.45446220773, -15.8868324887267, -15.322487345173, -14.7766169791155, -14.2595808687163, -13.778157632177, -13.3366252993679, -12.9375948514411, -12.5826158986952, -12.2726030056532, -12.0081318516747, -11.7896455821405, -11.6176016911255, -11.4925814439512, -11.415377771081, -11.3870735334585, -11.4091197089976, -11.4834220976179, -11.6124454716108, -11.7993458080078, -12.048144717535, -12.3639662584902, -12.7533665723253, -13.2248041640953, -13.7893288375827, -14.4616214605173, -15.2616178469529, -16.2171473400995, -17.3684198243202, -18.7760511633133, -20.5361267604345, -22.8087122553537, -25.8566648797083, -29.8267425781105, -31.7005359876024, -28.0058667449036, -24.1847219204161, -21.307579548106, -19.0883889826761, -17.3067784375715, -15.8315635618789, -14.5822673093807, -13.5067435746194, -12.5694356859095, -11.7450027226422, -11.0146758174733, -10.3640680233011, -9.78179763918949, -9.25858856200711, -8.78666272032063, -8.35931889638471, -7.97063562502483, -7.61526060663235, -7.28826368015092, -6.98503919884099, -6.70124889267155, -6.43279918205454, -6.1758480889912, -5.92683679958734, -5.68253994404069, -5.44012721509954, -5.19722757521836, -4.95198657850986, -4.70310774138925, -4.44987067373834, -4.19212170226957, -3.9302364777727, -3.66505781546566, -3.39781501990354, -3.1300326630765, -2.86343704866632, -2.59986759934508, -2.34119858075562, -2.08927443167763, -1.84585993934011, -1.61260486429818, -1.39102149874674, -1.18247302318176, -0.988170318197532, -0.80917497028513, -0.6464064663085, -0.500651906667452, -0.372576915613311, -0.262736748063907, -0.171586865022739, -0.0994924677460098, -0.0467366461067056, -0.0135269157399697, 0, -0.00622476537133961, -0.0322032512507989, -0.0778697548930081, -0.143087947334124, -0.227646013761343, -0.331249839941666, -0.453514313620951, -0.593952886014284, -0.75196565452525, -0.926826395210285, -1.11766920315922, -1.32347569861356, -1.54306412654831, -1.77508210411029, -2.01800521832463, -2.2701440796331, -2.5296626913137, -2.79461095964964, -3.06297368116707, -3.33273725055833, -3.6019735574286, -3.86893814985909, -4.1321770179747, -4.39063379928964, -4.64374749275866, -4.89153053327069, -5.13461870838507, -5.37428781858773, -5.61243659529519, -5.85154022826967, -6.09458288465598, -6.34498007235348, -6.60650235572366, -6.8832110326132, -7.17941454832207, -7.49965240375566, -7.84871179844624, -8.23168177198257, -8.65405058817282, -9.12185497380113, -9.64189523429375, -10.222039442537, -10.8716551965711, -11.6022334837924, -12.4283151865915, -13.3689157674202, -14.4498089620177, -15.7073703049591, -17.1954241405653, -18.9982556410692, -21.2569844074706, -24.2234319115087, -28.3073988107795, -32.670911977724, -30.3977442331051, -26.0145337803181, -22.83982492564, -20.522005993567, -18.7443252857749, -17.3307248508346, -16.1792320117619, -15.2266743582197, -14.4315854062711, -13.7654561292698, -13.2079539777647, -12.7441517230225, -12.3628386388591, -12.0554467326099, -11.8153430118084, -11.6373483507801, -11.5174013734592, -11.4523176617925, -11.4396128102221, -11.4773684978819, -11.5641270050658, -11.6988031245624, -11.8806040697319, -12.108948144145, -12.3833716819818, -12.7034109243313, -13.0684407060627, -13.4774446484266, -13.9286817609436, -14.4192027732779, -14.9441599909364, -15.4958580543872, -16.0625352105138, -16.6269935200549, -17.1654756263696, -17.6476309684074, -18.0388167008252, -18.3057065154123, -18.4244849815594, -18.3882625801014, -18.2093718060231, -17.9150149070842, -17.5390903380527, -17.1145972327986, -16.6691408212704, -16.2235348195157, -15.7923102804734, -15.3849828231225, -15.0073934664057, -14.6628363107126, -14.3529098227691, -14.078122132082, -13.8383061455353, -13.6328975012952, -13.4611172299571, -13.3220895061096, -13.2149155586596, -13.1387179568037, -13.0926646859067, -13.0759791414017, -13.0879399419252, -13.1278729516335, -13.1951368632925, -13.2891029628846, -13.4091291639151, -13.5545279973216, -13.7245279354718, -13.9182272103132, -14.1345391824109, -14.3721283945192, -14.6293368157575, -14.904100627715, -15.1938594666939, -15.4954626122593, -15.8050804800897, -16.1181350397137, -16.4292690693974, -16.7323802221676, -17.0207491334253, -17.2872873164079, -17.5249160361332, -17.7270595066346, -17.8881981307252, -18.004391752083, -18.0736664090602, -18.0961751311747, -18.074094036947, -18.0112814534801, -17.9127827977175, -17.7842871300996, -17.6316296858686, -17.4604009105861, -17.2756842124055, -17.0819147537618, -16.8828349252935, -16.6815171519365, -16.4804271766957, -16.2815068429581, -16.0862618306706, -15.895845339228, -15.7111328657931, -15.5327860500372, -15.3613053089796, -15.1970719700518, -15.0403810862002, -14.8914662789607, -14.7505179387954, -14.6176960038589, -14.4931383920775, -14.3769660076354, -14.2692850978616, -14.1701876075948, -14.0797500678066, -13.9980314633215, -13.9250704492841, -13.8608822254437, -13.8054553290553, -13.758748568991, -13.7206882933711, -13.6911661586455, -13.6700375476665, -13.6571207660942, -13.6521971287678, -13.6550120289183, -13.6652770619291]

    #Параметры материалов
print ('Параметры материалов')
print ('\n a =', a, '\n eps =', eps,'\n miy =', miy)

#Диапазон расчетных углов
teta_start = 0.01
teta_stop = 360
step = math.pi/180
teta_diap = abs(teta_stop)-abs(teta_start)
steps = int(((teta_diap)*(math.pi/180)) / step)
teta = [0 * n for i in range(steps)]
cos_teta = [0 * n for i in range(steps)]

  #Создаем массив для переменных среды
alfa = [0 * n for i in range(n)]
beta = [0 * n for i in range(n)]
etta = [0 * n for i in range(n)]
k = [[0] * n for i in range(n)]

    #Расчет переменных, входящих в коэффициенты k
for i in range(n):
  alfa[i] = cmath.atan((eps[i]).imag / (eps[i]).real) if (eps[i]).real != 0 else cmath.pi/2
  beta[i] = math.atan((miy[i]).imag / (miy[i]).real)
  etta[i] = cmath.sqrt(abs(eps[i]) * abs(miy[i]))

    #Conrol Point
    #print ('alfa:', alfa)
    #print ('beta:', beta)
    #print ('etta:', etta)

    #Расчет коэффициентов среды k

j = 0; #Индекс для рассчета коэффициентов k

for i in range (n):
  k[i][j] = k0 * a[i] * etta[j]
  if j < n - 1:
    j = j + 1
    k[i][j] = k0 * a[i] * etta[j]

    #Conrol Point
    #print ('k:', k)

    ####################################
    # Определяем переменные для функции Бесселя, Неймана, их производных, C, S, их производных
    ####################################

J = [0 * n for i in range(toch)]
Jpr = [0 * n for i in range(toch)]
N = [0 * n for i in range(toch)]
Npr = [0 * n for i in range(toch)]
C = [[0] * (len(etta)-1) for i in range(toch)]
Cpr = [[0] * (len(etta)-1) for i in range(toch)]
S = [[0] * (len(etta)-1) for i in range(toch)]
Spr = [[0] * (len(etta)-1) for i in range(toch)]

    ####################################
    # Определяем модифицированную функцию Бесселя первого рода как функцию Jfunc(i, j1, j2)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
    ####################################

def Jfunc(i, j1, j2):
  nu = i + 1
  J = (scipy.special.jv(nu + 0.5, k[j1][j2])) * (cmath.sqrt(k[j1][j2] * math.pi/2))
  return J

    ####################################
    # Определяем производную функции Бесселя первого рода как функцию Jprfunc(i, j1, j2, tie)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
    ####################################

def Jprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Jpr = ((nu / (2 * nu + 1)) *  (scipy.special.jv(nu - 0.5, k[j1][j2]) * cmath.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.jv(nu + 1.5, k[j1][j2]) * cmath.sqrt(k[j1][j2] * math.pi/2)) + \
    (J[i] / k[j1][j2]))
  else:
    Jpr = ((nu / (2 * nu + 1)) * ((scipy.special.jv(nu - 0.5,k[j1][j2]) * (cmath.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
     (((nu + 1) / (2 * nu + 1)) * ((scipy.special.jv(nu + 1.5,k[j1][j2])) * (cmath.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
     ((scipy.special.jv(nu + 0.5,k[j1][j2])) * (cmath.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]
  return Jpr

    ####################################
    # Определеям модифицированную фунцию Бесселя второго рода (функцию Неймана) как функцию Nfunc(i, j1, j2)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
    ####################################

def Nfunc(i, j1, j2):
  N = scipy.special.yv((i+1) + 0.5, k[j1][j2]) * cmath.sqrt(k[j1][j2]* math.pi/2)
  return N

    ####################################
    # Производная функции Неймана как функцию Nprfunc(i, j1, j2, tie)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
    ####################################

def Nprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Npr = ((nu / (2 * nu + 1)) *  (scipy.special.yv(nu - 0.5, k[j1][j2]) * cmath.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.yv(nu + 1.5, k[j1][j2]) * cmath.sqrt(k[j1][j2] * math.pi/2)) + \
    (Nfunc(i, j1, j2) / k[j1][j2]))
  else:
    Npr = (((nu/(2 * nu + 1)) * (((scipy.special.yv(nu - 0.5,k[j1][j2])) * (cmath.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
    (((nu + 1) / (2 * nu + 1)) * ((scipy.special.yv(nu + 1.5,k[j1][j2])) * (cmath.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
    (Nfunc(i, j1, j2)) / k[j1][j2])
  return Npr

    ####################################
    # Вычисляем массивы значений функции Бесселя первого рода, функции Неймана и их производных для i = 1...toch (значение точности расчетов)
    # связь между слоями не учитываем (tie == False), для k[0][0]  (j1, j2 == 0)
    ####################################

for i in range(toch):
  J[i] = Jfunc(i, 0, 0)
  Jpr[i] = Jprfunc(i, 0, 0, False)
  N[i] = Nfunc(i, 0, 0)
  Npr[i] = Nprfunc(i, 0, 0, False)


    ####################################
    # Вычисляем массивы значений функций C, S и их производных (Cpr и Spr)
    # в Npr и Jpr учитываем связь между слоями (tie == True)
    # C = J * Npr - N * Jpr
    # Cpr(n) = Jpr * Npr - Npr * Jpr
    # S(n) = N * J - J * N
    # Spr(n) = Npr * J - Jpr * N
    ####################################

for i in range(toch-1):
  for j in range(len(etta)-1):
    C[i][j] = (Jfunc(i, (j+1), (j+1)) * Nprfunc(i, j, (j+1), True)) - (Nfunc(i, (j+1), (j+1)) * Jprfunc(i, j, (j+1), True))
    Cpr[i][j] = Jprfunc(i, (j+1), (j+1), True) * Nprfunc(i, j, (j+1), True) - Nprfunc(i, (j+1), (j+1), True) * Jprfunc(i, j, (j+1), True)
    S[i][j] = Nfunc(i,(j+1),(j+1)) * Jfunc(i,j,(j+1)) - Jfunc(i,(j+1),(j+1)) * Nfunc(i,j,(j+1))
    Spr[i][j] = Nprfunc(i,(j+1),(j+1), True) * Jfunc(i, j, (j+1)) - Jprfunc(i,(j+1),(j+1), True) * Nfunc(i, j, (j+1))

    ####################################

    #Conrol Point
    #print('N:', N)
    #print('Npr:', Npr)
    #print('J:', J)
    #print('Jpr:', Jpr)
    #print('C:', C)
    #print('Cpr:', Cpr)
    #print('S:', S)
    #print('Spr:', Spr)

    ####################################
    # Добавляем в конец массива alfa элемент со значением 0
    # Добавляем в конец массива eps элемент со значением длинны массива eps
    ####################################

if eps[len(eps)-1] != (len(eps)-1):
    alfa.append(0)
    eps.append(len(eps))

    #Conrol Point
    #print('alfa[', len(alfa)-1,']:', alfa[len(alfa)-1])
    #print('eps[', len(eps)-1,']:', eps[len(eps)-1])

    ####################################
    # Определяем импедансы (Z) и адмитансы (Y)
    ####################################

Z = [[0] * (len(a)) for i in range(toch)]
Y = [[0] * (len(a)) for i in range(toch)]

for i in range(toch - 1):
  for h in range(len(a)):

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для первого слоя
    ####################################

    if h == 0:
      Z[i][h] = (cmath.sqrt((cmath.exp(alfa[1] * 1j) * abs(eps[1])) / ((cmath.exp(alfa[0] * 1j) * abs(eps[0]))))) * ((Jpr[i])/(J[i]))
      Y[i][h] = (cmath.sqrt((cmath.exp(alfa[0] * 1j) * abs(eps[0])) / ((cmath.exp(alfa[1] * 1j) * abs(eps[1]))))) * ((Jpr[i])/(J[i]))

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для последнего слоя
    ####################################

    else:
      if h == (len(a) - 1):
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                  (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1]) / 2
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                  (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1]) * 2

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для промежуточных слоёв
    ####################################

      else:
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1])
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1])

    #Conrol Point
    #print('Z:', Z)
    #print('Y:', Y)

    ####################################
    # Определяем массивы для mJ, mJpr, mH, mHpr
    ####################################

mJ = [0 * n for i in range(toch)]
mJpr = [0 * n for i in range(toch)]
mH = [0 * n for i in range(toch)]
mHpr = [0 * n for i in range(toch)]

    ####################################
    #Функция Ханкеоя второго рода как функцию Hfunc(i)
    #где: i -- порядок
    ####################################

def Hfunc(i, k0):

  nu = i + 1
  H = (scipy.special.hankel1(nu + 0.5,k0)) * (math.sqrt(k0 * math.pi/2))
  return H

    ####################################
    #Производная функции Ханкеоя второго рода как функцию Hprfunc(i)
    #где: i -- порядок
    ####################################

def Hprfunc(i, k0):
  nu = i + 1
  Hpr = ((nu / (2 * nu + 1)) * (((scipy.special.hankel1(nu - 0.5,k0) * (cmath.sqrt(k0 * math.pi/2))) / k0)) * k0 - \
  (((nu + 1) / (2 * nu + 1)) * ((scipy.special.hankel1(nu + 1.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0) * k0 + \
  ((scipy.special.hankel1(nu + 0.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0)
  return Hpr

    ####################################
    #Заполняем массивы mJ, mJpr, mH, mHpr
    ####################################

k1 = k0
k00 = k[0][0]
k[0][0] = k0
for i in range(toch):
  mJ[i] = Jfunc(i, 0, 0)
  mJpr[i] = Jprfunc(i, 0, 0, True)
  mH[i] = Hfunc(i, k0)
  mHpr[i] = Hprfunc(i, k0)
k0 = k1
k[0][0] = k00

    #Conrol Point
    #print('mJ:', mJ)
    #print('mJpr:', mJpr)
    #print('mH:', mH)
    #print('mHpr:', mHpr)

    ####################################
    # Определяем массивы для Mn и Nn
    ####################################

Mn = [0 * n for i in range(toch)]
Nn = [0 * n for i in range(toch)]

    ####################################
    # Задаём Mn и Nn
    ####################################

for i in range(toch):
  nu = i + 1
  Mn[i] = (Z[i][n-2] * mJ[i] - mJpr[i]) / (Z[i][n-2] * mH[i] - mHpr[i])
  Mn[i] = Mn[i].real - Mn[i].imag * 1j
  print(Z[i])
  Nn[i] = (Y[i][n-2] * mJ[i] - mJpr[i]) / (Y[i][n-2] * mH[i] - mHpr[i])
  Nn[i] = Nn[i].real - Nn[i].imag * 1j
  print(Y[i])

    #Conrol Point
    #print('Mn:', Mn)
    #print('Nn:', Nn)



    #Conrol Point
    #print(step, steps, math.pi)

for i in range(steps):
  if i == 0:
    teta[i] = (teta_start)*(math.pi/180)
  else:
    teta[i] = teta[i-1] + step

    #Conrol Point
    #print(teta)

for i in range(steps):
  cos_teta[i] = math.cos(teta[i])

    #Conrol Point
    #print(cos_teta)

M = [0 * n for i in range(steps)]
Lm0=[0 * n for i in range(steps)]
Lm1=[0 * n for i in range(steps)]
Lm2=[0 * n for i in range(steps)]
pii = [[0] * ((2*steps+1)) for i in range(toch+1)]
tay = [[0] * ((2*steps+1)) for i in range(toch+1)]
m=0

for i in range(toch):
  m = m+1
  M = scipy.special.lpmv(0, m, cos_teta)
  Lm0 = M
  M = scipy.special.lpmv(1, m, cos_teta)
  Lm1 = M

  if m<2:
    Lm2 = 0
  else:
    M = scipy.special.lpmv(2, m, cos_teta)
    Lm2 = M

  for z in range(len(teta)):
    if (teta[z] > 0) & (teta[z] < math.pi):
      pii[i][z] = ((1)*Lm1[z])/(math.sin(teta[z]))
    else:
      if (teta[z] > math.pi) & (teta[z] < 2*math.pi):
        pii[i][z] = ((-1)*Lm1[z])/(math.sin(teta[z]))

  for z in range(len(teta)):
    if m<2:
      tay[i][z] = (1/2)*(-m*(m+1)*Lm0[z])
    else:
      tay[i][z] = (1/2)*(Lm2[z]-m*(m+1)*Lm0[z])



y=0



####################################
# Расчёт Eop, Ekp для круговой поляризации
####################################

E_kp= [[0] * (len(teta)) for i in range(toch)]
E_op= [[0] * (len(teta)) for i in range(toch)]

for p in range(1, toch): 
    for z in range(len(teta)):
        E_op[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * (tay[p][z] - pii[p][z]) * (Mn[p] + Nn[p])
        E_kp[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * (tay[p][z] + pii[p][z]) * (Mn[p] - Nn[p])

P1 = np.sum(E_op, axis=0)
P2 = np.sum(E_kp, axis=0)

Pab1 = np.abs(P1)
Pab2 = np.abs(P2)



####################################
# Расчёт E для линейной поляризации
####################################

S_teta= [[0] * (len(teta)) for i in range(toch)]
S_phi= [[0] * (len(teta)) for i in range(toch)]
E_teta= [[0] * (len(teta)) for i in range(toch)]
E_phi= [[0] * (len(teta)) for i in range(toch)]
y=0

for z in range(len(teta)):


  for p in range(toch):
    y=p+1
    S_teta[p][z] = ((2*y + 1)/(y*(y + 1))) * ((-1)**y) * (-1 * (tay[p][z] * Mn[p] - pii[p][z] * Nn[p]) * math.cos(math.radians(teta[z])) * math.cos(phi)**2 - (pii[p][z] * Mn[p] - tay[p][z] * Nn[p]) * math.sin(phi)**2)
    S_phi[p][z]  = ((2*y + 1)/(y*(y + 1))) * ((-1)**y) * ((tay[p][z] * Mn[p] - pii[p][z] * Nn[p]) * math.cos(phi) * math.sin(phi) - (pii[p][z] * Mn[p] - tay[p][z] * Nn[p]) * math.cos(math.radians(teta[z]))**2 * math.sin(phi)*math.cos(phi))
    E_teta[0][z]=(E_teta[0][z]+S_teta[p][z])
    E_phi[0][z]=(E_phi[0][z]+S_phi[p][z])
    

  E_teta[0][z] = (1 - (math.sin(math.radians(teta[z])) * math.cos(phi))**2)**(-0.5) * E_teta[0][z]
  E_phi[0][z] = (1 - (math.sin(math.radians(teta[z])) * math.cos(phi))**2)**(-0.5) * E_phi[0][z]

  for p in range(toch):
    E_teta[0][z]=abs(E_teta[0][z])
    E_phi[0][z]=abs(E_phi[0][z])


  ####################################
  # Вычисление коэффициента рассеяния
  ####################################



  ####################################
  # Вычисление радиолокационного коэффициента рассеяния
  ####################################



  ####################################
  # Вычисление попутного коэффициента рассеяния
  ####################################
    



####################################
#    #Conrol Point
#      '''
#    print('P_teta:', P_teta)
#    for z in range((toch)):
#        print('E_teta:', E_teta[z][180])
#    '''
#
    #Normalize E diagram
tetay = [0 * n for i in range(steps)]
DN_NORM_lin_k0a_teta = [0 * n for i in range(len(teta))]
DN_NORM_lin_k0a_phi= [0 * n for i in range(len(teta))]
DN_NORM_circle_k0a_op = [0 * n for i in range(len(teta))]
DN_NORM_circle_k0a_kp = [0 * n for i in range(len(teta))]

DN_NORM_lin_dB_teta = [0 * n for i in range(len(teta))]
DN_NORM_lin_dB_phi= [0 * n for i in range(len(teta))]
DN_NORM_circle_dB_op = [0 * n for i in range(len(teta))]
DN_NORM_circle_dB_kp= [0 * n for i in range(len(teta))]

    #Conrol Point
    #print(P_teta_max)
for i in range(steps):
  teta[i] = teta[i] - math.pi
for i in range(len(teta)):
  tetay[i] = (teta[i]*(steps/(2*math.pi)))

#tetay.reverse()

    #Conrol Point
    #print(tetay)
  
  #Нормированные E к k0a
for i in range(len(teta)):
   DN_NORM_lin_k0a_teta[i] = (E_teta[0][i]/(k0))
   DN_NORM_lin_k0a_phi[i] = (E_phi[0][i]/(k0))
   DN_NORM_circle_k0a_op[i] = (Pab1[i]/(k0))
   DN_NORM_circle_k0a_kp[i] = (Pab2[i]/(k0))

  #Нормированные E dB

E_teta_max = 0
E_phi_max = 0
Pab1_max = 0
Pab2_max = 0

for i in range(len(teta)):
  if E_teta[0][i] > E_teta_max:
    E_teta_max = E_teta[0][i]
  if E_phi[0][i] > E_phi_max:
    E_phi_max = E_phi[0][i]
  if Pab1[i] > Pab1_max:
    Pab1_max = Pab1[i]
  if Pab2[i] > Pab2_max:
    Pab2_max = Pab2[i]



for i in range(len(teta)):
   DN_NORM_lin_dB_teta[i] = 20*np.log10(E_teta[0][i]/E_teta_max)
   DN_NORM_lin_dB_phi[i] = 20*np.log10(E_phi[0][i]/E_phi_max)
   DN_NORM_circle_dB_op[i] = 20*np.log10(Pab1[i]/Pab1_max)
   DN_NORM_circle_dB_kp[i] = 20*np.log10(Pab2[i]/Pab2_max)
   


    #Conrol Point

fig, ax = plt.subplots(figsize=(6, 6))
ax.set(xlim=(-180, 180))


#ОБЯЗАТЕЛЬНАЯ СТРОЧКА ДЛЯ ГРАФИКОВ В dB
#plt.ylim(-60, 0)

# Доступные массивы
#   DN_NORM_lin_k0a_teta -- Линейная поляризация, нормированно к к0а, Тета
#   DN_NORM_lin_k0a_phi -- Линейная поляризация, нормированно к к0а, Фи
#   DN_NORM_circle_k0a_op -- Круговая поляризация, нормированно к к0а, основная
#   DN_NORM_circle_k0a_kp -- Круговая поляризация, нормированно к к0а, кросс
#   DN_NORM_lin_dB_teta -- Линейная поляризация, нормированно dB, Тета
#   DN_NORM_lin_dB_phi -- Линейная поляризация, нормированно dB, Фи
#   DN_NORM_circle_dB_op -- Круговая поляризация, нормированно dB, основная
#   DN_NORM_circle_dB_kp -- Круговая поляризация, нормированно dB, кросс
#
#
# Создание графика 

plt.plot(tetay, DN_NORM_lin_k0a_phi, color='red', linestyle='-', linewidth=1, label='lin op')
plt.plot(tetay, DN_NORM_lin_k0a_teta, color='green', linestyle='-', linewidth=1, label='lin kp')


# Настройка шагов сетки на оси X
plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(5))  # Ограничение до 5 шагов

# Добавление знака градуса к подписям сетки
def format_degrees(x, pos):
    return f'{int(x)}°'

plt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(format_degrees))

# Включение подписей сетки по оси X
plt.tick_params(axis='x', which='both', bottom=True, labelbottom=True)

# Подписи осей
plt.ylabel(r'$E_{norm}$, dB', fontsize=14)  # Ось Y: Enorm в dB
plt.xlabel(r'$\theta$$^{\circ}$', fontsize=14)  # Ось X: Θ в градусах
plt.tight_layout()

# Легенда
plt.legend()

    #Show grid
plt.grid(True)
    #Polar Plot
# Создаем два графика в ряд
fig, axs = plt.subplots(1, 2, figsize=(10, 5), subplot_kw={'projection': 'polar'})

# График слева
axs[0].plot(teta, DN_NORM_circle_dB_op, color='black', linestyle='-', linewidth=1, label='GreenTensor')
#axs[0].plot(teta, DN_NORM_Ansys_2, color='black', linestyle=':', linewidth=1, label='Ansys HFSS')
axs[0].set_title(r'$E_{\theta}$, dB'" | Bistatic RCS", pad=30)
axs[0].legend(loc='best')
axs[0].set_ylim(-60, 0)

# График справа
axs[1].plot(teta, DN_NORM_circle_dB_kp, color='blue', linestyle='-', linewidth=1, label='GreenTensor | Bistatic RCS')
#axs[1].plot(teta, DN_NORM_Ansys_2, color='blue', linestyle=':', linewidth=1, label='GreenTensor | Bistatic RCS')
axs[1].set_title("dB HH-pol", pad=30)
axs[1].legend(loc='best')
axs[1].set_ylim(-60, 0)

# Подписи осей
plt.ylabel(r'$E_{norm}$, dB', fontsize=14, labelpad=25)  # Ось Y: Enorm в dB
plt.xlabel(r'$\theta$$^{\circ}$', fontsize=14)  # Ось X: Θ в градусах
plt.tight_layout()

#ОБЯЗАТЕЛЬНАЯ СТРОЧКА ДЛЯ ГРАФИКОВ В dB


    #Legend
ax.legend(loc='upper right')
plt.show()
