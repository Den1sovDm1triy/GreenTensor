import math
import cmath
import scipy
import matplotlib.pyplot as plt
import json
import matplotlib.ticker as ticker
import numpy as np

#Задаем радиус сферы
k0 = 4 * math.pi
toch = 30
n = 4 #число слоев (последний слой - воздух)
phi = (math.pi) / 2
eps = [0 * n for i in range(n)]
miy = [0 * n for i in range(n)]
a = [0 * n for i in range(n)]

#4 layers
a = [0.25, 0.5, 0.75, 1]
eps = [1.94, 1.75, 1.44, 1]
miy = [1, 1, 1, 1]
DN_NORM_Ansys = [-24.6897272958261, -24.803157550588, -25.0902772239008, -25.5009817678081, -25.9302184433818, -26.2177453003537, -26.2033799838903, -25.8354185172427, -25.2160761819961, -24.5199115744304, -23.8967416182625, -23.4416984398791, -23.2080645697278, -23.2266616255522, -23.5197583633288, -24.1094909443432, -25.0224518288116, -26.2894450511961, -27.9303788808284, -29.8831446919743, -31.7655437312592, -32.5965068691792, -31.7993059285864, -30.2435199027417, -28.7645564898575, -27.6220719619843, -26.8426033654848, -26.4016811593444, -26.2735133866026, -26.4408619116728, -26.8937478689328, -27.621776301713, -28.5951019325906, -29.7211488102244, -30.771005507329, -31.3621194405475, -31.2203065990781, -30.5114229948686, -29.6387972474946, -28.8942682527599, -28.4099631528631, -28.2312478004508, -28.3692440318932, -28.8234751089764, -29.5867102027725, -30.6343997765723, -31.8875573008285, -33.1305808057234, -33.9388429391129, -33.9039647725252, -33.121865155424, -32.0628196694754, -31.0898376360492, -30.365720296679, -29.9474400343064, -29.8532814046321, -30.0890178096408, -30.6508775200733, -31.5090723131772, -32.5607136178102, -33.5464597810196, -34.0399950518223, -33.7705403056511, -32.9649934292606, -32.0580519513756, -31.3339985045148, -30.9138475835779, -30.8411933754948, -31.1358056983363, -31.8168242739241, -32.9094746748447, -34.4329744175083, -36.3299743497724, -38.2145039685307, -39.045944090047, -38.2079068556688, -36.6547997015004, -35.2649765182217, -34.3015217493053, -33.7985486775205, -33.7504754628701, -34.1632653425671, -35.0662893017196, -36.5040336091462, -38.4558195670879, -40.4340643272916, -40.8048706868539, -38.9765474049377, -36.6716089869217, -34.7869956916347, -33.4399256760848, -32.5885843623588, -32.1886184076319, -32.2156052697537, -32.6596163735599, -33.5012444729609, -34.636160174589, -35.6808937422253, -35.8421672793072, -34.7091220201929, -32.9299441367279, -31.1982569394214, -29.7810076344876, -28.7306421303118, -28.0384365412301, -27.6851500743978, -27.6523311095362, -27.9185571302033, -28.4428868054268, -29.1270938453952, -29.7538900022214, -29.9724234996689, -29.5110843522516, -28.4743130658497, -27.2123066246719, -26.0067413809127, -24.9960544021558, -24.2316794295636, -23.7276928870945, -23.4842167691151, -23.4943695650181, -23.7403900873849, -24.1775322903922, -24.7004085454645, -25.1002513928217, -25.0861486850342, -24.4763972632533, -23.3855789641768, -22.0979343677534, -20.8445760761594, -19.747309173344, -18.8561726269225, -18.1872536155383, -17.7426542648555, -17.5180811022072, -17.5029716355695, -17.6744234923767, -17.9837123772672, -18.3354587790263, -18.5726404163228, -18.509291961773, -18.0401876122078, -17.2301243132294, -16.2568232446149, -15.2911763331037, -14.4442701916829, -13.775249304073, -13.3130172339539, -13.0721658517863, -13.0615196100215, -13.287227087469, -13.750888936446, -14.4401015188088, -15.3041224441579, -16.2056313550107, -16.8714995227122, -16.975219733369, -16.434155453005, -15.5174786930212, -14.5673209889161, -13.8042856440496, -13.3426261187407, -13.2523749466766, -13.6039881941325, -14.5003676848266, -16.1023993789654, -18.5549497163129, -20.8529040412626, -18.9719652598761, -14.8497769882347, -11.3640109458318, -8.64739088174103, -6.50355541749351, -4.78848738388769, -3.41060709571395, -2.3110254809233, -1.45087385970667, -0.804083317311309, -0.353259388781522, -0.0872937066914874, 0, -0.0894094057857727, -0.357552163128809, -0.810674795670075, -1.45994405208812, -2.322810908367, -3.42539990318205, -4.80663576393852, -6.52546058484224, -8.67346848938341, -11.3944326823162, -14.8828447114265, -18.9945800215914, -20.8411582200591, -18.5488629112311, -16.1120051799339, -14.5211526110081, -13.6332935309135, -13.2888949982761, -13.3854059460527, -13.8516487746251, -14.6150175215475, -15.5554030014065, -16.4432938377428, -16.9342189031017, -16.7782390120298, -16.0821553337892, -15.1740258733809, -14.3162301966988, -13.6378541940756, -13.1857372058666, -12.9708123897739, -12.9911714133477, -13.2410661724016, -13.7127957775492, -14.3939144934384, -15.2591342113468, -16.25450835835, -17.2738847382307, -18.1445600256333, -18.6723310730977, -18.7688322219405, -18.5312115340609, -18.155979797996, -17.8137046412936, -17.6077582637836, -17.5897256528608, -17.7824089713164, -18.1945780880376, -18.827411113353, -19.6742418641314, -20.7128480189826, -21.8867018520044, -23.0733855595486, -24.0620618844237, -24.6161792378347, -24.6537409576773, -24.3327489955749, -23.9025740947972, -23.5515906612838, -23.3828547573924, -23.4454051756033, -23.7625320682761, -24.3465201145044, -25.2024181016084, -26.3205273418947, -27.6495076005361, -29.0354575426944, -30.1491514214775, -30.5877849412168, -30.2786848731945, -29.5776008421402, -28.867790646749, -28.3563680388847, -28.1249367022488, -28.2020268431197, -28.6003177918058, -29.3308679130719, -30.4042254543975, -31.8151898244585, -33.4867290063428, -35.1239992287094, -36.0781259274691, -35.8561119954294, -34.8713837021858, -33.8053257449957, -32.9972453954546, -32.5483406967826, -32.4805619963944, -32.8028001079834, -33.5326648898065, -34.700706930198, -36.3326723622655, -38.347849321518, -40.1836327813082, -40.4984169351145, -39.060106710261, -37.217912524006, -35.7126303708463, -34.686271460502, -34.1297764868815, -34.0224319727732, -34.3594369807323, -35.1484855842486, -36.3738595137295, -37.8550538221759, -38.8896938790107, -38.4051669509527, -36.6282265497061, -34.6541619512959, -33.0051105304798, -31.7845786881858, -30.980994716633, -30.5656312097079, -30.5126062487081, -30.7956375150901, -31.371257987787, -32.1426759444989, -32.9033548425908, -33.3252930704553, -33.1497353295451, -32.45984198405, -31.5797940238315, -30.7850358274649, -30.2184958846309, -29.9374324867181, -29.9602921272531, -30.288351212992, -30.906997652456, -31.7650484330432, -32.7198566040631, -33.4594303825715, -33.562278539057, -32.8833233061734, -31.7415450521521, -30.5419326546616, -29.5191545571414, -28.7702934590346, -28.330531713239, -28.2130230375181, -28.4221916856487, -28.9506199202299, -29.7568099807544, -30.7089780323367, -31.4985076133771, -31.6787991708666, -31.062150867186, -29.9589395518201, -28.7869075374836, -27.7828076578327, -27.0357791043963, -26.5711849134588, -26.3960253909632, -26.5178045529439, -26.9518800115627, -27.7228937690157, -28.8562654829967, -30.3335835340662, -31.9230606673386, -32.8244863069009, -32.0931810097125, -30.2172608144703, -28.2208174217509, -26.5232742031099, -25.1957314016873, -24.2183008863534, -23.5582424325687, -23.1866865446109, -23.0793341139062, -23.212471712398, -23.5560957442661, -24.0634662394989, -24.6574863474087, -25.221468100933, -25.6158156636891, -25.7395199371728, -25.5984322977113, -25.3005893696724, -24.984212613276]
DN_NORM_Ansys_1 = [-24.5427674615887, -24.5899144540202, -24.6030178976942, -24.5881241950545, -24.5570783003814, -24.5258717854049, -24.5124798594485, -24.5344695441274, -24.6068467086913, -24.7407061331474, -24.9432353199326, -25.219517102168, -25.5763099446039, -26.0274792628881, -26.6002176565733, -27.3413027245923, -28.3241987378265, -29.6613935121382, -31.5337814792031, -34.2688732841749, -38.5442692749566, -44.5331725939952, -41.1647919621095, -35.9834413623131, -32.8112634231322, -30.7934175009453, -29.5102148715621, -28.7550824563902, -28.4107195867826, -28.4004599295477, -28.6663905097141, -29.1577882220475, -29.82392765448, -30.6090505271625, -31.4491902783338, -32.272302272354, -33.0047966048685, -33.5867483482532, -33.9914858154106, -34.2368052736222, -34.3777720784051, -34.4860748988477, -34.6291669374231, -34.8554025721326, -35.1809148039622, -35.5699762064386, -35.9080276734472, -35.9990222494511, -35.6590786620941, -34.8810354483866, -33.8534087308978, -32.8047371111603, -31.8933305205722, -31.2024062738956, -30.7698305881311, -30.6119279253866, -30.7361814177853, -31.1458586682379, -31.8376744095608, -32.7889179030321, -33.9238951883065, -35.0506711273859, -35.8214542207042, -35.9129161427777, -35.3784445146199, -34.5842187349149, -33.852139852589, -33.3470319448843, -33.1339899338308, -33.2347667069128, -33.6527948294506, -34.3754054039061, -35.3549061125008, -36.460857615031, -37.4175001314026, -37.8568015774293, -37.6330570927071, -37.0016635517446, -36.3273494594606, -35.8397676791913, -35.6374864889152, -35.7488785661042, -36.1621447838241, -36.8189483606823, -37.5740143046181, -38.1476635598881, -38.2008462975586, -37.6246217701884, -36.6605734812697, -35.6309770492057, -34.7347436868228, -34.0526344576247, -33.6011596821136, -33.3643728852022, -33.3035477944711, -33.3543799469506, -33.4211760213502, -33.3830932884508, -33.1303870194428, -32.6218875885918, -31.9103757620768, -31.1051369573414, -30.314892199818, -29.617864672665, -29.0592480852882, -28.658091822832, -28.4125537253455, -28.300418171232, -28.2757683207941, -28.2662568387227, -28.1805384441851, -27.9359465750051, -27.4987598337558, -26.9036140173472, -26.231199664986, -25.5678601006235, -24.9795407104656, -24.5059681077823, -24.1648381630643, -23.9572218186905, -23.8704613762715, -23.8775593284223, -23.93333032285, -23.9697962608465, -23.8982313985288, -23.6294944522597, -23.1138987478286, -22.3728761053468, -21.4892046076677, -20.5659345649955, -19.6918054335802, -18.9291941984511, -18.3164937313671, -17.8740125403243, -17.6079653516463, -17.5108121145398, -17.5573967083071, -17.6971580679035, -17.8459965650541, -17.889632624995, -17.7164459164245, -17.2758925393084, -16.6116192080923, -15.8304302788394, -15.04449863956, -14.3384831354101, -13.7665084133965, -13.361202138895, -13.1428867670395, -13.1253778954008, -13.318001390528, -13.723231137287, -14.3273585819167, -15.0786505741848, -15.848893100122, -16.4034795198342, -16.4790428663435, -16.0080514430048, -15.2023909582326, -14.3534771412414, -13.6690729914273, -13.2688346241116, -13.232036460945, -13.6394872476539, -14.6095647257101, -16.3380228518236, -19.0664394609407, -21.8056341135407, -19.5232057957116, -15.0208627928948, -11.4203538000597, -8.66677474791688, -6.50979976562839, -4.79003824609881, -3.41071927380417, -2.3109549410445, -1.45103724330774, -0.804521913562129, -0.353831413765139, -0.0877489348743928, 0, -0.0885229205645724, -0.355242144438514, -0.806289564655422, -1.45272702006409, -2.31195347985455, -3.41019114430869, -4.78684455616974, -6.5023404435026, -8.65267174052083, -11.3958305890841, -14.9801768790059, -19.4696533985605, -21.8211890148034, -19.1199311259819, -16.3795465544514, -14.6379427981213, -13.6571886226496, -13.240825106527, -13.2698127922301, -13.66271255647, -14.3391975246165, -15.1775246010826, -15.9667660424736, -16.4141078091308, -16.3128644091, -15.7387753544644, -14.9576677505968, -14.2017932669128, -13.5967402203579, -13.1927666563829, -13.0030352134745, -13.0251137814569, -13.2501316171853, -13.665079410483, -14.2507630105123, -14.9759141662522, -15.7876568132092, -16.6015520082815, -17.3030607416796, -17.7796346830263, -17.9810226798555, -17.9547144066052, -17.813561189608, -17.67429928509, -17.6223190757893, -17.7079061715602, -17.9547891860907, -18.3683240846527, -18.939625231095, -19.6456288890627, -20.4461456643322, -21.2803140550763, -22.067915015354, -22.7237428633278, -23.1873820570674, -23.4519309845986, -23.5659485388986, -23.6069665616163, -23.65129098465, -23.7582192955702, -23.967587992938, -24.3025783511672, -24.7721703200627, -25.3709175424014, -26.0754411431405, -26.8385066338758, -27.5849849421652, -28.2199898283527, -28.6600409443098, -28.877198491706, -28.9176737558538, -28.8745138174285, -28.8439758319044, -28.8998582979758, -29.0888967272458, -29.4347921103444, -29.9413389831618, -30.5905522254586, -31.3349554748355, -32.0878159074978, -32.7259944914489, -33.1295570706759, -33.2538997547529, -33.166654009412, -33.0031650347779, -32.8965756476401, -32.9444002447528, -33.209175484941, -33.7282492406095, -34.5169421451861, -35.5544337088509, -36.7370981536421, -37.7967954269431, -38.3092123321015, -38.0425980114812, -37.2625830187828, -36.4058005688491, -35.748285311917, -35.4090623916374, -35.4321894191968, -35.8296128156558, -36.5813015724057, -37.5844610238955, -38.5304214302626, -38.846278344341, -38.1716384696306, -36.8715947390726, -35.5089259065978, -34.379456941642, -33.5762899858361, -33.1138306597788, -32.983626576455, -33.1704110971914, -33.6482283894483, -34.3572733563114, -35.1519026456358, -35.7365595656645, -35.7338616597759, -35.0202032046001, -33.8774080381354, -32.6721434458277, -31.6261208161358, -30.8343245217008, -30.3308176435893, -30.1269829674146, -30.2272812669956, -30.6336901404774, -31.3434560075715, -32.3392594196065, -33.5659064766939, -34.8863728879536, -36.0375835201964, -36.6977159675762, -36.7437037301733, -36.3699647475727, -35.8551665958027, -35.3658595820886, -34.9520655889998, -34.5994064311861, -34.2674451578526, -33.9113271115082, -33.4940213347851, -32.992760921817, -32.4013565205661, -31.7304350060003, -31.0071702406657, -30.2739833637831, -29.5848365829013, -28.9995922697399, -28.5789894283964, -28.3827509731294, -28.4720336422967, -28.9170032246321, -29.8122261010526, -31.3093009901941, -33.6992115177015, -37.6778142623728, -45.2440335029865, -43.9883143863986, -36.8601033115765, -32.971454339417, -30.4976949017375, -28.7996888932882, -27.589224026517, -26.7038677033713, -26.0382501638241, -25.520190956502, -25.1022044480242, -24.7574700254692, -24.4754634134062, -24.2560454768449, -24.1030530425639, -24.0189625501189, -24.0015164206793, -24.0423765024062, -24.1274731139792, -24.2386667604793, -24.3563289044875]
DN_NORM_Ansys_2 = [-57.1949913642363, -56.9934347442525, -48.8656985655755, -42.1163399363283, -37.3323795145154, -33.7580763986811, -30.9938702013711, -28.823394036313, -27.1203264797238, -25.8071138846692, -24.8352564849873, -24.1752265015213, -23.8111832126629, -23.7384036410648, -23.9625272883754, -24.5002596996856, -25.3813021294513, -26.6503796513699, -28.3627456423844, -30.5383581384427, -32.9189585332713, -34.3131402958004, -33.461950857312, -31.5348807524843, -29.7784925001911, -28.4792700040685, -27.6223995803257, -27.1530242462556, -27.025925166595, -27.2090499425294, -27.6772339835393, -28.4002485501596, -29.3205537840382, -30.314798002824, -31.1550332735947, -31.5578479478826, -31.3982000146804, -30.8443064237174, -30.1834289460788, -29.627344771816, -29.2849207918132, -29.2033219271436, -29.4021487697817, -29.8898180451129, -30.6659194225928, -31.7072663950605, -32.9229887627549, -34.0621092124979, -34.6650966784975, -34.3821828507419, -33.4246767837557, -32.2808237561067, -31.273228049076, -30.5345081850115, -30.1073839932892, -30.0034879377215, -30.2245161621557, -30.7632509099902, -31.587530581885, -32.5981341465839, -33.5586578064678, -34.0895414648336, -33.9350389906078, -33.2685207290599, -32.4814030331551, -31.8559231543595, -31.5248303010616, -31.5423554858341, -31.9357161037018, -32.7284299224137, -33.9444988365005, -35.583745661459, -37.5078028121824, -39.1237443850922, -39.3717548681299, -38.234040793458, -36.7735509669519, -35.6071444366812, -34.8930618895127, -34.6560814356437, -34.9136379361564, -35.7191157784105, -37.1968675999443, -39.6076394087165, -43.4360842099865, -47.7529237113201, -44.5401988534659, -39.9325130074894, -36.863765106447, -34.8365224782382, -33.5296603201555, -32.785706252721, -32.5319393425569, -32.7444304587741, -33.4280500138524, -34.5845181837073, -36.0959191601169, -37.3566625343235, -37.1201161496363, -35.2939683651312, -33.1131664143322, -31.2392906031523, -29.7993689072156, -28.7755161198246, -28.1311016061098, -27.8370068727017, -27.8727477799953, -28.2185248409524, -28.835293493471, -29.6191218527782, -30.321476305969, -30.5279424743726, -29.9440526268533, -28.7507830844956, -27.3685283622254, -26.0885106830577, -25.0359291809601, -24.2503668428168, -23.7391904001184, -23.4995914485395, -23.5240912389182, -23.7956189159796, -24.2700065343321, -24.8388508027324, -25.279823677482, -25.2765917164518, -24.6355626972769, -23.4936356062971, -22.1614736868375, -20.8783067942145, -19.7634837468463, -18.862898149049, -18.189568966261, -17.74378788495, -17.5203814714939, -17.5085426839898, -17.6855237865089, -18.0028199314544, -18.3646087262982, -18.6115482672852, -18.5532134638469, -18.0811318434809, -17.261932157269, -16.2779974806391, -15.303430120172, -14.450298799055, -13.7775683715169, -13.3136287329837, -13.072566049305, -13.0628085040467, -13.2902369472905, -13.7563046510823, -14.448541539189, -15.3160829039215, -16.2210475340872, -16.8887573386498, -16.9908838781465, -16.4454291427378, -15.524212400323, -14.5707890526047, -13.8057549403743, -13.3430125924231, -13.2523731493326, -13.6043153822817, -14.5021751722731, -16.1083684404223, -18.5729318759206, -20.896763915567, -19.0076564587046, -14.8652777718416, -11.3710640835423, -8.65086060338953, -6.50531033182592, -4.78935948169163, -3.41101444450592, -2.31119426706952, -1.45092972856767, -0.804094231182102, -0.353258436718225, -0.0872929263840095, 0, -0.0894071270107728, -0.35754816391694, -0.810681206204774, -1.45999464129035, -2.32297575850064, -3.42580985116345, -4.80752858650527, -6.52727984299305, -8.67710479906795, -11.4019035509262, -14.8994454762222, -19.0331870633857, -20.8889839500002, -18.5689560452869, -16.1189811427226, -14.5234908037101, -13.6339368721903, -13.2891316661825, -13.3860659140875, -13.8535762970298, -14.6193831681246, -15.5639029770894, -16.4577443385046, -16.9546662543386, -16.8012411541898, -16.1032405551378, -15.190864947337, -14.328450219144, -13.6458810191875, -13.1902508052396, -12.9726636062799, -12.9914725097684, -13.2413320418221, -13.7150929273806, -14.4009819684371, -15.2743729876331, -16.2815309657429, -17.3149705803773, -18.1975950550237, -18.7286332066223, -18.8171175935802, -18.5651742285395, -18.1760335143501, -17.823555955164, -17.6115528948116, -17.5911249348816, -17.7847004918567, -18.2011517291835, -18.8423805238035, -19.7031651772852, -20.7634006495683, -21.9685589612791, -23.1950572842197, -24.2216021124014, -24.7914214924708, -24.8121614375047, -24.455267101177, -23.9885769987746, -23.608790359805, -23.4197165114179, -23.4688523847419, -23.7782304526133, -24.3603096951137, -25.222923247464, -26.3639533433115, -27.7479483658892, -29.2453745780137, -30.5336276599333, -31.134951055057, -30.867319166221, -30.0967068624583, -29.2779705153687, -28.6576841845339, -28.3289027457827, -28.3231019495681, -28.6566953351958, -29.3502491846849, -30.4363903907619, -31.9593380386366, -33.947219925969, -36.2624280734882, -38.1056855044888, -38.0605490356066, -36.5119269813113, -34.8656738750175, -33.6496984732976, -32.9291943362341, -32.6815032809332, -32.8923234321006, -33.5788526164558, -34.8054167952244, -36.7147604234473, -39.600325455811, -43.9798702468206, -48.1215615114316, -44.3308809853041, -40.2031497283071, -37.585122120697, -35.9627495129221, -35.0449841182643, -34.6933517213394, -34.8466608365879, -35.4807615361389, -36.5616152704601, -37.9189629961685, -38.9471125779123, -38.6624572822316, -37.0930469002732, -35.218729892146, -33.6077932167555, -32.4011725766283, -31.6008175807318, -31.1806513632927, -31.11248481642, -31.364142646174, -31.8822956560539, -32.5574128659217, -33.1784786373409, -33.4490407792973, -33.1768559191237, -32.4710272868827, -31.6204624674194, -30.8639370065885, -30.3297200204363, -30.073616258308, -30.1175492090666, -30.4684214045061, -31.1199412952512, -32.0347878860386, -33.092889705534, -34.0032307942185, -34.3158197400359, -33.7978727634971, -32.7347025440804, -31.5646364291618, -30.5489203074447, -29.7893328917796, -29.3147744250034, -29.1284738438843, -29.2246283914922, -29.5885848829208, -30.1833858839232, -30.9176723733355, -31.5969659000351, -31.9198079096211, -31.6521544240049, -30.8675530227421, -29.8638838893262, -28.9057136481448, -28.1396515774338, -27.6329693748477, -27.4191640941609, -27.5245639152527, -27.9824574441975, -28.8408857241748, -30.1609163056527, -31.9677554658728, -33.9684647136118, -34.794928765486, -33.2203132148725, -30.7080776814127, -28.4678880921184, -26.7189391214218, -25.4231441311282, -24.5182132678709, -23.9563487176658, -23.7061793263112, -23.7498014796478, -24.0804436804839, -24.7015034227265, -25.6270237815214, -26.8838285265806, -28.5159882426304, -30.5931513435514, -33.2260113661604, -36.5955922902749, -41.0057117224605, -46.9045070434596]
DN_NORM_Ansys_kp = [-0.113613850653365, -0.416355385962016, -0.904539483882544, -1.56447856736611, -2.36727504705127, -3.26251454885318, -4.1759829919433, -5.02188816084786, -5.73681270133383, -6.31878310427157, -6.83476679898155, -7.3877295519572, -8.07512196559682, -8.96309258485076, -10.0698035096567, -11.3370920101749, -12.5799615228756, -13.4718458007897, -13.7284324378435, -13.395289492527, -12.7654719299042, -12.0818025927589, -11.4483896059498, -10.8872057636307, -10.3984513672391, -9.99249325997845, -9.69918885422975, -9.56536716711306, -9.65025522119742, -10.0249257961587, -10.7784037973016, -12.0323260514954, -13.9649155648684, -16.8035681844141, -20.2285787148499, -20.4928366755628, -17.1394559325392, -14.2328548534127, -12.289791399825, -11.1058696616944, -10.5168732498158, -10.4205089154378, -10.7524210626021, -11.4697375978201, -12.5399856480513, -13.9294246599303, -15.5817045707321, -17.3716590099602, -19.0302276070919, -20.1462315618119, -20.4722408319245, -20.232935426951, -19.861903363916, -19.6729521010743, -19.8467299320404, -20.5226756866835, -21.8856807970945, -24.2870949234526, -28.5330684018475, -34.3725118950073, -28.7996054733797, -23.3763756465857, -19.97946167896, -17.6865995981488, -16.1018831857805, -15.0410920394878, -14.4145048242038, -14.1848468841805, -14.3522288437585, -14.9528551430184, -16.0714218981965, -17.8804169279623, -20.7600498654026, -25.7637504356818, -35.7332774716997, -27.6530466349874, -21.7781232730608, -18.5597143602954, -16.573394464873, -15.3483303014351, -14.6839701450111, -14.4888026645851, -14.7308154030647, -15.4236915484808, -16.6324610836111, -18.5018694137876, -21.3269869043776, -25.6162907245441, -29.5483167178723, -25.6404093388322, -21.4249286113476, -18.6877244402796, -16.9298282876828, -15.867740554092, -15.3698944259786, -15.3884592417939, -15.9353873220862, -17.0860022146993, -19.0134669905824, -22.0769417899119, -26.7721930580647, -28.8349568191899, -23.9180233814977, -20.1008335580142, -17.6319672816865, -16.0151521199399, -14.9824973410818, -14.3858407087347, -14.1364967973766, -14.1798926698486, -14.4858512693913, -15.0468093964111, -15.8808892618194, -17.0382275052901, -18.606916530158, -20.6938076070187, -23.2093602939027, -24.8100787900108, -23.3072755949259, -20.4630074590601, -18.0313715671511, -16.2487859157347, -15.0421894865679, -14.332822617156, -14.0688698905093, -14.2227122326567, -14.7883408679088, -15.7843761429792, -17.2658308880162, -19.3506110333136, -22.2628234108862, -26.2130347059708, -28.8538707879995, -25.571950161534, -21.7258734506523, -18.9091977079059, -16.8650846712902, -15.3881432653846, -14.3764998041353, -13.7893560754961, -13.6235529816847, -13.9052705568403, -14.6933779019908, -16.0974612452141, -18.325069860676, -21.79409014264, -27.0789391448395, -28.6498621801875, -23.6189626570351, -20.1774914816358, -18.0963471824826, -16.8624762918332, -16.2154162454497, -16.0170101875561, -16.1939466482974, -16.7174584953267, -17.6017482263055, -18.9188575133198, -20.8439185666364, -23.7961676230908, -29.0688569385099, -47.0466305147279, -30.0375783370337, -23.5971356558195, -20.0262217164718, -17.6992791777995, -16.1390343028415, -15.1488997339949, -14.6374412474736, -14.5645001328996, -14.9219183213469, -15.7279210070353, -17.0295350702972, -18.9128721343383, -21.5235081696077, -25.0870143130021, -29.7332005253332, -33.5885379145902, -33.2172838936711, -32.6813917289374, -34.2374546743112, -36.0751514645628, -30.92431025428, -25.4710974285755, -21.6331040652979, -18.9005702596452, -16.946605064344, -15.5941671122059, -14.744871858231, -14.3455167768296, -14.3734617303264, -14.8319894936949, -15.7533909505926, -17.2123904142761, -19.360183769164, -22.5044551757393, -27.18153490643, -31.0897906862279, -26.8241767340667, -22.6704199821798, -19.8944916830351, -17.9470946946858, -16.5349789929227, -15.5220593820232, -14.8562310621594, -14.5369544900988, -14.6028903150254, -15.1344737112871, -16.2778089733672, -18.3207998030248, -21.9642323130097, -29.7767487636762, -30.5522185780807, -21.7727246371832, -17.5856015935503, -15.1206648627076, -13.63514231057, -12.8423289921396, -12.610451206076, -12.8802697692864, -13.6397615091542, -14.9228236560725, -16.8280123695988, -19.5658638202465, -23.4945492332192, -27.7924445558529, -25.8529539013871, -21.7002346003629, -18.7662203739491, -16.7607012179451, -15.3856590412663, -14.4822600951969, -13.9675787867963, -13.7983491098952, -13.9526001963864, -14.4200590347466, -15.197259301624, -16.2856517703487, -17.6912979113613, -19.4202557995507, -21.4404193069943, -23.4953100550184, -24.6410789138715, -23.7780341569607, -21.6496085710461, -19.4522142648167, -17.6050317855697, -16.1768663498072, -15.1629207168126, -14.5568437651632, -14.3676214238384, -14.6271187057074, -15.4014962569735, -16.8164524051129, -19.1172697982142, -22.802481976867, -28.15063079686, -27.03107744208, -21.9844121999203, -18.7683342960281, -16.803377045963, -15.6684620367187, -15.164494107259, -15.2016462092243, -15.755880522998, -16.8595225263582, -18.6153840124765, -21.2354614964703, -25.0134170139447, -28.5954046977528, -26.2384307428391, -22.3862705696268, -19.667005067831, -17.8364931785976, -16.6304390643585, -15.8990848835763, -15.5612454285988, -15.5767511095002, -15.9344082141704, -16.6497928595304, -17.7724966064527, -19.4090950923196, -21.7841511242861, -25.4169624792341, -31.5164767369553, -33.0129166162682, -26.1144879644468, -21.8713181943792, -19.1018448299466, -17.1877029125051, -15.8748602795545, -15.0501690295527, -14.6662430637093, -14.7140823409554, -15.2150648652751, -16.2253545951439, -17.8562638140262, -20.3304633273578, -24.1470491353219, -30.5147040872699, -33.6615497113394, -27.1923676944721, -23.5388339655011, -21.4973682471438, -20.3495191397288, -19.7580415370641, -19.5091450209871, -19.4159053076717, -19.2753271927591, -18.8731516990151, -18.0597147515622, -16.8481666225478, -15.4061464745392, -13.9441283623346, -12.6314018247626, -11.5821301689779, -10.8735907412343, -10.5679854546824, -10.7320029521503, -11.458762940329, -12.9033556611073, -15.3539879113307, -19.3033149884039, -23.3004501430296, -19.6639549194979, -15.3308883493343, -12.507178485909, -10.6778593728929, -9.51438495128237, -8.83249024866343, -8.51654978055911, -8.48385696455599, -8.66785297234264, -9.01182361210848, -9.47116664413086, -10.0229831621981, -10.6777594395364, -11.4835695355789, -12.5125452007819, -13.8104657928204, -15.2367728979437, -16.1010952297984, -15.3911130460576, -13.4263218735606, -11.2830148625727, -9.44137783888705, -7.97366218522176, -6.83210765762483, -5.93981508117501, -5.21226843150562, -4.566334310757, -3.93295187337705, -3.27283713718355, -2.58505193045231, -1.90065115025407, -1.26595466030301, -0.726774090175707, -0.320045073042588, -0.0720809576973113]




    #Параметры материалов
print ('Параметры материалов')
print ('\n a =', a, '\n eps =', eps,'\n miy =', miy)

#Диапазон расчетных углов
teta_start = 0.01
teta_stop = 360
step = math.pi/180
teta_diap = abs(teta_stop)-abs(teta_start)
steps = int(((teta_diap)*(math.pi/180)) / step)
teta = [0 * n for i in range(steps)]
cos_teta = [0 * n for i in range(steps)]

  #Создаем массив для переменных среды
alfa = [0 * n for i in range(n)]
beta = [0 * n for i in range(n)]
etta = [0 * n for i in range(n)]
k= [[0] * n for i in range(n)]

    #Расчет переменных, входящих в коэффициенты k
for i in range(n):
  alfa[i] = math.atan((eps[i]).imag / (eps[i]).real)
  beta[i] = math.atan((miy[i]).imag / (miy[i]).real)
  etta[i] = math.sqrt(math.fabs(eps[i]) * math.fabs(miy[i]))

    #Conrol Point
    #print ('alfa:', alfa)
    #print ('beta:', beta)
    #print ('etta:', etta)

    #Расчет коэффициентов среды k

j = 0; #Индекс для рассчета коэффициентов k

for i in range (n):
  k[i][j] = k0 * a[i] * etta[j]
  if j < n - 1:
    j = j + 1
    k[i][j] = k0 * a[i] * etta[j]

    #Conrol Point
    #print ('k:', k)

    ####################################
    # Определяем переменные для функции Бесселя, Неймана, их производных, C, S, их производных
    ####################################

J = [0 * n for i in range(toch)]
Jpr = [0 * n for i in range(toch)]
N = [0 * n for i in range(toch)]
Npr = [0 * n for i in range(toch)]
C = [[0] * (len(etta)-1) for i in range(toch)]
Cpr = [[0] * (len(etta)-1) for i in range(toch)]
S = [[0] * (len(etta)-1) for i in range(toch)]
Spr = [[0] * (len(etta)-1) for i in range(toch)]

    ####################################
    # Определяем модифицированную функцию Бесселя первого рода как функцию Jfunc(i, j1, j2)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
    ####################################

def Jfunc(i, j1, j2):
  nu = i + 1
  J = (scipy.special.jv(nu + 0.5, k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))
  return J

    ####################################
    # Определяем производную функции Бесселя первого рода как функцию Jprfunc(i, j1, j2, tie)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
    ####################################

def Jprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Jpr = ((nu / (2 * nu + 1)) *  (scipy.special.jv(nu - 0.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.jv(nu + 1.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) + \
    (J[i] / k[j1][j2]))
  else:
    Jpr = ((nu / (2 * nu + 1)) * ((scipy.special.jv(nu - 0.5,k[j1][j2]) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
     (((nu + 1) / (2 * nu + 1)) * ((scipy.special.jv(nu + 1.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
     ((scipy.special.jv(nu + 0.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]
  return Jpr

    ####################################
    # Определеям модифицированную фунцию Бесселя второго рода (функцию Неймана) как функцию Nfunc(i, j1, j2)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2]
    ####################################

def Nfunc(i, j1, j2):
  N = scipy.special.yv((i+1) + 0.5, k[j1][j2]) * math.sqrt(k[j1][j2]* math.pi/2)
  return N

    ####################################
    # Производная функции Неймана как функцию Nprfunc(i, j1, j2, tie)
    # где: i -- порядок, j1&j2 -- координаты коэффициента k в массиве k[j1][j2], tie (True | False) -- наличие связи между слоями
    ####################################

def Nprfunc(i, j1, j2, tie):

  nu = i + 1

  if tie == False:
    Npr = ((nu / (2 * nu + 1)) *  (scipy.special.yv(nu - 0.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) - \
    ((nu + 1) / (2 * nu + 1)) *  (scipy.special.yv(nu + 1.5, k[j1][j2]) * math.sqrt(k[j1][j2] * math.pi/2)) + \
    (Nfunc(i, j1, j2) / k[j1][j2]))
  else:
    Npr = (((nu/(2 * nu + 1)) * (((scipy.special.yv(nu - 0.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2])) * k[j1][j2] - \
    (((nu + 1) / (2 * nu + 1)) * ((scipy.special.yv(nu + 1.5,k[j1][j2])) * (math.sqrt(k[j1][j2] * math.pi/2))) / k[j1][j2]) * k[j1][j2] + \
    (Nfunc(i, j1, j2)) / k[j1][j2])
  return Npr

    ####################################
    # Вычисляем массивы значений функции Бесселя первого рода, функции Неймана и их производных для i = 1...toch (значение точности расчетов)
    # связь между слоями не учитываем (tie == False), для k[0][0]  (j1, j2 == 0)
    ####################################

for i in range(toch):
  J[i] = Jfunc(i, 0, 0)
  Jpr[i] = Jprfunc(i, 0, 0, False)
  N[i] = Nfunc(i, 0, 0)
  Npr[i] = Nprfunc(i, 0, 0, False)


    ####################################
    # Вычисляем массивы значений функций C, S и их производных (Cpr и Spr)
    # в Npr и Jpr учитываем связь между слоями (tie == True)
    # C = J * Npr - N * Jpr
    # Cpr(n) = Jpr * Npr - Npr * Jpr
    # S(n) = N * J - J * N
    # Spr(n) = Npr * J - Jpr * N
    ####################################

for i in range(toch-1):
  for j in range(len(etta)-1):
    C[i][j] = (Jfunc(i, (j+1), (j+1)) * Nprfunc(i, j, (j+1), True)) - (Nfunc(i, (j+1), (j+1)) * Jprfunc(i, j, (j+1), True))
    Cpr[i][j] = Jprfunc(i, (j+1), (j+1), True) * Nprfunc(i, j, (j+1), True) - Nprfunc(i, (j+1), (j+1), True) * Jprfunc(i, j, (j+1), True)
    S[i][j] = Nfunc(i,(j+1),(j+1)) * Jfunc(i,j,(j+1)) - Jfunc(i,(j+1),(j+1)) * Nfunc(i,j,(j+1))
    Spr[i][j] = Nprfunc(i,(j+1),(j+1), True) * Jfunc(i, j, (j+1)) - Jprfunc(i,(j+1),(j+1), True) * Nfunc(i, j, (j+1))

    ####################################

    #Conrol Point
    #print('N:', N)
    #print('Npr:', Npr)
    #print('J:', J)
    #print('Jpr:', Jpr)
    #print('C:', C)
    #print('Cpr:', Cpr)
    #print('S:', S)
    #print('Spr:', Spr)

    ####################################
    # Добавляем в конец массива alfa элемент со значением 0
    # Добавляем в конец массива eps элемент со значением длинны массива eps
    ####################################

if eps[len(eps)-1] != (len(eps)-1):
    alfa.append(0)
    eps.append(len(eps))

    #Conrol Point
    #print('alfa[', len(alfa)-1,']:', alfa[len(alfa)-1])
    #print('eps[', len(eps)-1,']:', eps[len(eps)-1])

    ####################################
    # Определяем импедансы (Z) и адмитансы (Y)
    ####################################

Z = [[0] * (len(a)) for i in range(toch)]
Y = [[0] * (len(a)) for i in range(toch)]

for i in range(toch - 1):
  for h in range(len(a)):

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для первого слоя
    ####################################

    if h == 0:
      Z[i][h] = (cmath.sqrt((cmath.exp(alfa[1] * 1j) * abs(eps[1])) / ((cmath.exp(alfa[0] * 1j) * abs(eps[0]))))) * ((Jpr[i])/(J[i]))
      Y[i][h] = (cmath.sqrt((cmath.exp(alfa[0] * 1j) * abs(eps[0])) / ((cmath.exp(alfa[1] * 1j) * abs(eps[1]))))) * ((Jpr[i])/(J[i]))

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для последнего слоя
    ####################################

    else:
      if h == (len(a) - 1):
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                  (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1]) / 2
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                  (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1]) * 2

    ####################################
    #Задаем импедансы (Z) и адмитансы (Y) для промежуточных слоёв
    ####################################

      else:
        Z[i][h] = (cmath.sqrt((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1])) / ((cmath.exp(alfa[h] * 1j) * abs(eps[h]))))) * \
                (Cpr[i][h-1] + Z[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Z[i][h-1] * S[i][h-1])
        Y[i][h] = (cmath.sqrt((cmath.exp(alfa[h] * 1j) * abs(eps[h])) / ((cmath.exp(alfa[h+1] * 1j) * abs(eps[h+1]))))) * \
                (Cpr[i][h-1] + Y[i][h-1] * Spr[i][h-1]) / (C[i][h-1] + Y[i][h-1] * S[i][h-1])

    #Conrol Point
    #print('Z:', Z)
    #print('Y:', Y)

    ####################################
    # Определяем массивы для mJ, mJpr, mH, mHpr
    ####################################

mJ = [0 * n for i in range(toch)]
mJpr = [0 * n for i in range(toch)]
mH = [0 * n for i in range(toch)]
mHpr = [0 * n for i in range(toch)]

    ####################################
    #Функция Ханкеоя второго рода как функцию Hfunc(i)
    #где: i -- порядок
    ####################################

def Hfunc(i):

  nu = i + 1
  H = (scipy.special.hankel1(nu + 0.5,k0)) * (math.sqrt(k0 * math.pi/2))
  return H

    ####################################
    #Производная функции Ханкеоя второго рода как функцию Hprfunc(i)
    #где: i -- порядок
    ####################################

def Hprfunc(i):
  nu = i + 1
  Hpr = ((nu / (2 * nu + 1)) * (((scipy.special.hankel1(nu - 0.5,k0) * (cmath.sqrt(k0 * math.pi/2))) / k0)) * k0 - \
  (((nu + 1) / (2 * nu + 1)) * ((scipy.special.hankel1(nu + 1.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0) * k0 + \
  ((scipy.special.hankel1(nu + 0.5,k0)) * (cmath.sqrt(k0 * math.pi/2))) / k0)
  return Hpr

    ####################################
    #Заполняем массивы mJ, mJpr, mH, mHpr
    ####################################

k1 = k0
k00 = k[0][0]
k[0][0] = k0
for i in range(toch):
  mJ[i] = Jfunc(i, 0, 0)
  mJpr[i] = Jprfunc(i, 0, 0, True)
  mH[i] = Hfunc(i)
  mHpr[i] = Hprfunc(i)
k0 = k1
k[0][0] = k00

    #Conrol Point
    #print('mJ:', mJ)
    #print('mJpr:', mJpr)
    #print('mH:', mH)
    #print('mHpr:', mHpr)

    ####################################
    # Определяем массивы для Mn и Nn
    ####################################

Mn = [0 * n for i in range(toch)]
Nn = [0 * n for i in range(toch)]

    ####################################
    # Задаём Mn и Nn
    ####################################

for i in range(toch):
  nu = i + 1
  Mn[i] = (Z[i][h] * mJ[i] - mJpr[i]) / (Z[i][h] * mH[i] - mHpr[i])
  Mn[i] = Mn[i].real - Mn[i].imag * 1j
  Nn[i] = (Y[i][h] * mJ[i] - mJpr[i]) / (Y[i][h] * mH[i] - mHpr[i])
  Nn[i] = Nn[i].real - Nn[i].imag * 1j

    #Conrol Point
    #print('Mn:', Mn)
    #print('Nn:', Nn)



    #Conrol Point
    #print(step, steps, math.pi)

for i in range(steps):
  if i == 0:
    teta[i] = (teta_start)*(math.pi/180)
  else:
    teta[i] = teta[i-1] + step

    #Conrol Point
    #print(teta)

for i in range(steps):
  cos_teta[i] = math.cos(teta[i])

    #Conrol Point
    #print(cos_teta)

M = [0 * n for i in range(steps)]
Lm0=[0 * n for i in range(steps)]
Lm1=[0 * n for i in range(steps)]
Lm2=[0 * n for i in range(steps)]
pii = [[0] * ((2*steps+1)) for i in range(toch+1)]
tay = [[0] * ((2*steps+1)) for i in range(toch+1)]
m=0

for i in range(toch):
  m = m+1
  M = scipy.special.lpmv(0, m, cos_teta)
  Lm0 = M
  M = scipy.special.lpmv(1, m, cos_teta)
  Lm1 = M

  if m<2:
    Lm2 = 0
  else:
    M = scipy.special.lpmv(2, m, cos_teta)
    Lm2 = M

  for z in range(len(teta)):
    if (teta[z] > 0) & (teta[z] < math.pi):
      pii[i][z] = ((1)*Lm1[z])/(math.sin(teta[z]))
    else:
      if (teta[z] > math.pi) & (teta[z] < 2*math.pi):
        pii[i][z] = ((-1)*Lm1[z])/(math.sin(teta[z]))

  for z in range(len(teta)):
    if m<2:
      tay[i][z] = (1/2)*(-m*(m+1)*Lm0[z])
    else:
      tay[i][z] = (1/2)*(Lm2[z]-m*(m+1)*Lm0[z])



y=0



####################################
# Расчёт Eop, Ekp для круговой поляризации
####################################

E_kp= [[0] * (len(teta)) for i in range(toch)]
E_op= [[0] * (len(teta)) for i in range(toch)]

for p in range(1, toch): 
    for z in range(len(teta)):
        E_op[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * (tay[p][z] - pii[p][z]) * (Mn[p] + Nn[p])
        E_kp[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * (tay[p][z] + pii[p][z]) * (Mn[p] - Nn[p])

P1 = np.sum(E_op, axis=0)
P2 = np.sum(E_kp, axis=0)

Pab1 = np.abs(P1)
Pab2 = np.abs(P2)

####################################
# Расчёт Eop, Ekp для линейной поляризации
####################################

S_kp= [[0] * (len(teta)) for i in range(toch)]
S_op= [[0] * (len(teta)) for i in range(toch)]

for p in range(1, toch): 
    for z in range(len(teta)):
        S_op[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * (-1 * (tay[p][z] * Mn[p] - pii[p][z] * Nn[p]) * math.cos(math.radians(teta[z])) * math.cos(phi)**2 - (pii[p][z] * Mn[p] - tay[p][z] * Nn[p]) * math.sin(phi)**2)
        S_kp[p][z] = ((2*p + 1)/(p*(p + 1))) * ((-1)**p) * ((tay[p][z] * Mn[p] - pii[p][z] * Nn[p]) * math.cos(phi) * math.sin(phi) - (pii[p][z] * Mn[p] - tay[p][z] * Nn[p]) * math.cos(math.radians(teta[z]))**2 * math.sin(phi))

S1 = np.sum(E_op, axis=0)
S2 = np.sum(E_kp, axis=0)

for z in range(len(teta)):
    S1[z] = (1 - (math.sin(math.radians(teta[z])) * math.cos(phi))**2)**(-0.5) * S1[z]
    S2[z] = (1 - (math.sin(math.radians(teta[z])) * math.cos(phi))**2)**(-0.5) * S2[z]

Sab1 = np.abs(S1)
Sab2 = np.abs(S2)

####################################
# Расчёт E для линейной поляризации
####################################

E_teta= [[0] * (len(teta)) for i in range(toch)]
P_teta= [[0] * (len(teta)) for i in range(toch)]

for z in range(len(teta)):
  for p in range(toch):
    y=p+1
    E_teta[p][z]=((((2*y+1)/(y*(y+1)))*((-1)**y))*(tay[p][z]*Mn[p]-pii[p][z]*Nn[p]))

  for p in range(toch):
    y=p+1
    P_teta[0][z]=(P_teta[0][z]+E_teta[p][z])
  for p in range(toch):
    P_teta[0][z]=abs(P_teta[0][z])


####################################
    #Conrol Point
    '''
    print('P_teta:', P_teta)
    for z in range((toch)):
        print('E_teta:', E_teta[z][180])
    '''

    #Normalize E diagram
tetay = [0 * n for i in range(steps)]
DN_NORM = [0 * n for i in range(len(teta))]
DN_NORM_circle_op = [0 * n for i in range(len(teta))]
DN_NORM_circle_kp = [0 * n for i in range(len(teta))]
DN_NORM_lin_op = [0 * n for i in range(len(teta))]
DN_NORM_lin_kp = [0 * n for i in range(len(teta))]

P_teta_max = 0
Pab1_max = 0
Pab2_max = 0
Sab1_max = 0
Sab2_max = 0

for i in range(len(teta)):
  if P_teta[0][i] > P_teta_max:
    P_teta_max = P_teta[0][i]
  if Pab1[i] > Pab1_max:
    Pab1_max = Pab1[i]
  if Pab2[i] > Pab2_max:
    Pab2_max = Pab2[i]
  if Sab1[i] > Sab1_max:
    Sab1_max = Sab1[i]
  if Sab2[i] > Sab2_max:
    Sab2_max = Sab2[i]

    #Conrol Point
    #print(P_teta_max)
for i in range(steps):
  teta[i] = teta[i] - math.pi
for i in range(len(teta)):
  tetay[i] = (teta[i]*(steps/(2*math.pi)))

#tetay.reverse()

    #Conrol Point
    #print(tetay)
for i in range(len(teta)):
  DN_NORM[i] = 20*math.log10(P_teta[0][i]/Sab1_max)
  DN_NORM_circle_op[i] = 20*math.log10(Pab1[i]/Pab1_max)
  DN_NORM_circle_kp[i] = 20*math.log10(Pab2[i]/Pab2_max)
  DN_NORM_lin_op[i] = 20*math.log10(Sab1[i]/Sab1_max)
  DN_NORM_lin_kp[i] = 20*math.log10(Sab2[i]/Sab1_max)
  
    #Conrol Point
    #print(DN_NORM)
fig, ax = plt.subplots(figsize=(6, 6))
ax.set(xlim=(-180, 180))
plt.ylim(-60, 0)

# Создание графика
plt.plot(tetay, DN_NORM, color='blue', linestyle='-', linewidth=1, label='Linear')
plt.plot(tetay, DN_NORM_lin_op, color='red', linestyle='-', linewidth=1, label='lin op')
plt.plot(tetay, DN_NORM_lin_kp, color='green', linestyle='-', linewidth=1, label='lin kp')
#plt.plot(tetay, DN_NORM_Ansys, color='blue', linestyle='-', linewidth=1, label='Circle kp')

# Настройка шагов сетки на оси X
plt.gca().xaxis.set_major_locator(ticker.MaxNLocator(5))  # Ограничение до 5 шагов

# Добавление знака градуса к подписям сетки
def format_degrees(x, pos):
    return f'{int(x)}°'

plt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(format_degrees))

# Включение подписей сетки по оси X
plt.tick_params(axis='x', which='both', bottom=True, labelbottom=True)

# Подписи осей
plt.ylabel(r'$E_{norm}$, dB', fontsize=14)  # Ось Y: Enorm в dB
plt.xlabel(r'$\theta$$^{\circ}$', fontsize=14)  # Ось X: Θ в градусах
plt.tight_layout()

# Легенда
plt.legend()

    #Show grid
plt.grid(True)
    #Polar Plot
fig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})




ax.plot(teta, DN_NORM, color='blue', linestyle='-', linewidth=1, label='Linear')
ax.plot(teta, DN_NORM_lin_op, color='red', linestyle='-', linewidth=1, label='Lin op')
ax.plot(teta, DN_NORM_lin_kp, color='green', linestyle='-', linewidth=1, label='Lin kp')
# Подписи осей
plt.ylabel(r'$E_{norm}$, dB', fontsize=14, labelpad=25)  # Ось Y: Enorm в dB
plt.xlabel(r'$\theta$$^{\circ}$', fontsize=14)  # Ось X: Θ в градусах
plt.tight_layout()
ax.set_ylim(-60, 0)
    #Legend
ax.legend(loc='upper right')
#ax.set_yticklabels([])
#ax.set_xticklabels([])
  #Titleplt.title('Polar Scatterplot')
  #Print
print('E0_Norm = ' + str(DN_NORM))
plt.show()